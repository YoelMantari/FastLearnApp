🧠 Pregunta 31
¿Cuál es una consecuencia directa del cambio de contenido en un archivo gestionado por Git?

A. Solo se modifica el mensaje del commit actual
B. El árbol y el commit que lo contienen también cambian
C. Se genera una rama nueva automáticamente
D. Git borra el historial del archivo

✅ Correcta: B
🧾 Explicación: En Git, cambiar un archivo modifica su blob, lo que cambia el tree que lo contiene y, por lo tanto, el commit asociado, propagando el cambio.

🧠 Pregunta 32
¿Qué ventaja ofrece Git al permitir múltiples flujos de trabajo como Git Flow o GitHub Flow?

A. Facilita el uso sin ramas
B. Impide que dos usuarios trabajen en paralelo
C. Permite adaptar el flujo de trabajo al estilo del equipo
D. Requiere siempre trabajar en la rama main

✅ Correcta: C
🧾 Explicación: Git es flexible y permite aplicar diferentes flujos de trabajo según el tamaño y estilo del equipo, como ramas cortas o estructuras formales.

🧠 Pregunta 33
¿Qué tipo de datos almacena un objeto tree en Git?

A. Solamente el mensaje del commit
B. El contenido completo de cada archivo
C. Referencias a blobs y otros trees
D. El historial de fusiones entre ramas

✅ Correcta: C
🧾 Explicación: Un objeto tree representa un directorio e incluye referencias a blobs (archivos) y otros trees (subdirectorios).

🧠 Pregunta 34
¿Por qué Git puede ser más eficiente en operaciones locales comparado con sistemas centralizados?

A. Utiliza una base de datos externa
B. Ejecuta todos los comandos en la nube
C. Opera principalmente en el servidor remoto
D. Realiza operaciones críticas sin necesidad de conectarse a red

✅ Correcta: D
🧾 Explicación: Git realiza operaciones como commits, logs y diffs localmente, lo que lo hace más rápido y eficiente al no depender del servidor.

🧠 Pregunta 35
¿Qué diferencia a un sistema distribuido como Git de uno centralizado como Subversion?

A. En Git, los commits no se registran
B. Git no necesita conexión constante al servidor
C. En Git no se pueden fusionar ramas
D. Git no guarda historial de versiones

✅ Correcta: B
🧾 Explicación: A diferencia de Subversion, Git no requiere conexión constante porque cada clon es un repositorio completo con todo el historial.

🧠 Pregunta 36
¿Cuándo se generan los packfiles en Git?

A. Solo durante la creación del repositorio
B. Cada vez que se hace un git commit
C. Durante operaciones como git clone, fetch, push o git gc
D. Solo cuando se eliminan ramas

✅ Correcta: C
🧾 Explicación: Los packfiles se generan durante operaciones de transferencia o mantenimiento como clone, fetch, push o git gc, para optimizar almacenamiento.

🧠 Pregunta 37
¿Qué comando permite ver y editar visualmente conflictos durante una fusión?

A. git log
B. git branch
C. git mergetool
D. git fetch

✅ Correcta: C
🧾 Explicación: git mergetool permite al usuario resolver conflictos visualmente usando herramientas gráficas compatibles como Meld o VS Code.

🧠 Pregunta 38
¿Qué tipo de objeto Git contiene información como autor, fecha y mensaje?

A. Tree
B. Blob
C. Commit
D. Packfile

✅ Correcta: C
🧾 Explicación: El objeto commit almacena metadatos del cambio como autor, fecha, mensaje y punteros al árbol del proyecto y a su padre.

🧠 Pregunta 39
¿Qué comando permite aplicar un commit específico de una rama distinta a la actual?

A. git merge
B. git fetch
C. git cherry-pick
D. git reset

✅ Correcta: C
🧾 Explicación: git cherry-pick aplica commits seleccionados de otra rama en la rama actual, sin fusionar todo el historial de la rama de origen.

🧠 Pregunta 40
¿Por qué Git puede detectar rápidamente si un archivo ha sido modificado?

A. Porque guarda una copia temporal en el servidor
B. Porque compara nombres de archivo
C. Porque compara los hashes del contenido
D. Porque hace un escaneo visual de los archivos

✅ Correcta: C
🧾 Explicación: Git detecta cambios comparando los hashes del contenido. Si el contenido cambia, el hash cambia y Git lo marca como modificado.

🧠 Pregunta 41
¿Qué propiedad tiene un algoritmo de hash que permite detectar alteraciones con alta sensibilidad?

A. Aleatoriedad
B. Reversibilidad
C. Propagación de ramas
D. Avalancha

✅ Correcta: D
🧾 Explicación: La propiedad de avalancha implica que un pequeño cambio en la entrada genera un cambio radical en el hash, permitiendo detectar alteraciones mínimas.

🧠 Pregunta 42
¿Cuál es el beneficio principal de usar SHA-256 en lugar de SHA-1 en Git?

A. Mejora la visualización del historial
B. Ocupa menos espacio en disco
C. Es más rápido al crear ramas
D. Es más resistente a colisiones

✅ Correcta: D
🧾 Explicación: SHA-256 ofrece mayor seguridad criptográfica que SHA-1, especialmente contra ataques por colisión donde dos entradas generan el mismo hash.

🧠 Pregunta 43
¿Qué estructura usa Git para representar el historial de versiones y sus relaciones?

A. Árbol AVL
B. Grafo acíclico dirigido (DAG)
C. Matriz de versiones
D. Lista doblemente enlazada

✅ Correcta: B
🧾 Explicación: Git usa un grafo acíclico dirigido (DAG) donde cada commit apunta a sus padres, reflejando así la evolución y ramificación del historial.

🧠 Pregunta 44
¿Qué ventaja tiene Git sobre sistemas centralizados cuando se trabaja en entornos sin conectividad?

A. No permite commits sin red
B. Exige conexión al servidor para ver historial
C. Permite commits y consultas locales sin red
D. Bloquea operaciones locales hasta sincronizar

✅ Correcta: C
🧾 Explicación: Al tener una copia completa del repositorio, Git permite trabajar localmente en cualquier operación como commit, log o diff sin necesidad de internet.

🧠 Pregunta 45
¿Cuál es la función del comando git gc?

A. Generar commits condicionales
B. Forzar la sincronización con ramas remotas
C. Recolectar basura y optimizar almacenamiento
D. Generar claves para el repositorio

✅ Correcta: C
🧾 Explicación: git gc (garbage collection) limpia objetos huérfanos y agrupa objetos en packfiles para optimizar espacio y rendimiento.

🧠 Pregunta 46
¿Qué característica del diseño de Git permite detectar cualquier corrupción en su contenido?

A. Control centralizado
B. Hash por objeto
C. Commit incremental
D. Validación manual

✅ Correcta: B
🧾 Explicación: Cada objeto (blob, tree, commit) en Git se identifica por un hash de su contenido; si el contenido se altera, el hash cambia y se detecta.

🧠 Pregunta 47
¿Qué componente de Git actúa como “instantánea” del estado del proyecto en un momento dado?

A. Blob
B. Branch
C. Commit
D. HEAD

✅ Correcta: C
🧾 Explicación: Un commit apunta a un tree que representa el estado completo del proyecto en ese instante, actuando como una instantánea del repositorio.

🧠 Pregunta 48
¿Qué comando permite combinar commits durante un rebase interactivo?

A. squash
B. fetch
C. revert
D. pop

✅ Correcta: A
🧾 Explicación: En un git rebase -i, puedes usar la acción squash para combinar varios commits en uno solo y mantener un historial más limpio.

🧠 Pregunta 49
¿Qué técnica usa Git para reducir el tamaño de almacenamiento entre archivos similares?

A. Compression shift
B. Tree pruning
C. Delta encoding
D. File snapshotting

✅ Correcta: C
🧾 Explicación: Delta encoding permite que Git almacene solo las diferencias entre versiones de archivos, reduciendo el espacio requerido.

🧠 Pregunta 50
¿Cuál es el riesgo principal que motivó la migración de Git de SHA-1 a SHA-256?

A. Bajo rendimiento al comprimir
B. Dificultad para identificar ramas
C. Existencia de vulnerabilidades de colisión en SHA-1
D. Incompatibilidad con sistemas operativos modernos

✅ Correcta: C
🧾 Explicación: SHA-1 fue vulnerado con colisiones prácticas, lo que representa un riesgo para la integridad del repositorio. SHA-256 corrige estas debilidades.


🧠 Pregunta 51
¿Qué representa el objeto HEAD en un repositorio Git?

A. El primer commit del historial
B. El commit más reciente de la rama main
C. El puntero a la rama activa o al último commit referenciado
D. Un archivo de configuración del repositorio

✅ Correcta: C
🧾 Explicación: HEAD es un puntero simbólico que indica la rama o commit en el que estás trabajando actualmente. Cambia cuando haces checkout o commit.

🧠 Pregunta 52
¿Qué sucede si haces git reset --hard HEAD~1?

A. Agrega un commit vacío
B. Fusiona automáticamente la rama actual con otra
C. Elimina el último commit de forma irreversible
D. Mueve la rama actual al commit más reciente

✅ Correcta: C
🧾 Explicación: El comando git reset --hard HEAD~1 borra el último commit y sus cambios, dejando el proyecto como estaba en el commit anterior.

🧠 Pregunta 53
¿Qué componente de Git agrupa varios objetos en un único archivo comprimido para eficiencia?

A. Commit
B. Tree
C. Packfile
D. Mergefile

✅ Correcta: C
🧾 Explicación: Los packfiles agrupan muchos objetos Git (blobs, commits, trees) en un solo archivo comprimido, lo que mejora rendimiento y ahorro de espacio.

🧠 Pregunta 54
¿Qué comando se utiliza para ver el historial de commits en una línea de tiempo?

A. git show
B. git graph
C. git log
D. git timeline

✅ Correcta: C
🧾 Explicación: git log permite ver la lista de commits, sus mensajes, autores, fechas y hashes, mostrando el historial del proyecto.

🧠 Pregunta 55
¿Qué herramienta ofrece Git para comparar cambios entre dos commits?

A. git commit --diff
B. git patch
C. git compare
D. git diff

✅ Correcta: D
🧾 Explicación: git diff compara los cambios entre commits, ramas, archivos o el índice, permitiendo analizar qué ha cambiado en el código.

🧠 Pregunta 56
¿Cuál es la función principal del comando git branch?

A. Fusionar ramas
B. Crear, listar o eliminar ramas
C. Cambiar de commit
D. Mostrar diferencias entre archivos

✅ Correcta: B
🧾 Explicación: git branch se usa para listar, crear o eliminar ramas en el repositorio, facilitando la gestión de desarrollos paralelos.

🧠 Pregunta 57
¿Cuándo es recomendable usar git revert en lugar de git reset?

A. En ramas públicas compartidas con otros desarrolladores
B. Cuando se desea eliminar completamente el historial
C. Solo al trabajar con repositorios remotos
D. Nunca, ya que ambos hacen lo mismo

✅ Correcta: A
🧾 Explicación: git revert genera un nuevo commit que deshace los cambios de otro, sin alterar el historial, lo que lo hace seguro en ramas compartidas.

🧠 Pregunta 58
¿Cuál es la principal ventaja del modelo de sincronización asincrónica en Git?

A. Evita la creación de ramas
B. Permite hacer commits directamente al servidor
C. Los desarrolladores pueden trabajar en paralelo y sincronizar después
D. Garantiza que no habrá conflictos

✅ Correcta: C
🧾 Explicación: Git permite que los desarrolladores trabajen localmente y sin conexión, sincronizando sus cambios con otros cuando lo deseen mediante pull o push.

🧠 Pregunta 59
¿Qué representa un blob dentro de la base de datos de objetos de Git?

A. Un grupo de ramas
B. Un objeto con los metadatos de un commit
C. El contenido de un archivo
D. Una estructura que describe directorios

✅ Correcta: C
🧾 Explicación: Un blob (Binary Large OBject) representa el contenido de un archivo sin información de nombre ni ubicación, solo su contenido puro.

🧠 Pregunta 60
¿Cuál de las siguientes opciones es una ventaja directa del uso de árboles de Merkle en Git?

A. Permiten revertir fácilmente los cambios
B. Aumentan el tamaño del repositorio
C. Verifican la integridad del historial mediante propagación de hashes
D. Requieren acceso al servidor para validar los commits

✅ Correcta: C
🧾 Explicación: Los árboles de Merkle en Git encadenan hashes jerárquicamente, asegurando que cualquier alteración sea detectable desde la raíz del repositorio.