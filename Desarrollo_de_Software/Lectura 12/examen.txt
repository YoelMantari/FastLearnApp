ğŸ§  Pregunta 106

Un desarrollador quiere combinar varios commits locales recientes en uno solo antes de hacer push a la rama remota Â¿QuÃ© comando de Git con quÃ© opciÃ³n le permitirÃ­a lograr esto de forma interactiva

A. git merge --squash HEAD~3
B. git rebase -i HEAD~3
C. git checkout --ours HEAD~3
D. git reset --soft HEAD~3

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: El comando git rebase -i (interactive) seguido del punto de anclaje (HEAD~3 en este caso, para los Ãºltimos tres commits) abre un editor donde el desarrollador puede elegir la acciÃ³n squash o fixup para combinar commits.

ğŸ§  Pregunta 107

Â¿CuÃ¡l de las siguientes afirmaciones describe mejor la funciÃ³n del reflog en Git

A. Muestra un historial permanente de todos los commits en el repositorio, incluyendo aquellos en ramas eliminadas
B. Registra cada cambio realizado en los punteros de las ramas y el HEAD, permitiendo rastrear la historia de las acciones locales
C. ActÃºa como una cachÃ© para acelerar las bÃºsquedas en el historial de commits remotos
D. Permite a los desarrolladores anotar commits con comentarios adicionales que no se incluyen en el mensaje del commit

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: El reflog es un mecanismo de seguridad que registra los cambios en las referencias locales, como los movimientos de las ramas y el HEAD, lo que es invaluable para recuperar trabajo despuÃ©s de acciones como resets o rebases accidentales.

ğŸ§  Pregunta 108

En un proyecto que utiliza submÃ³dulos, despuÃ©s de que el repositorio del submÃ³dulo ha sido actualizado con nuevos commits Â¿QuÃ© comando debe ejecutarse desde el repositorio principal para actualizar la referencia al nuevo commit del submÃ³dulo

A. git pull <ruta_del_submÃ³dulo>
B. git submodule update --init --recursive
C. git submodule update --remote <ruta_del_submÃ³dulo>
D. git submodule sync

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: El comando git submodule update --remote <ruta_del_submÃ³dulo> consulta el repositorio remoto del submÃ³dulo y actualiza la referencia en el repositorio principal al Ãºltimo commit de la rama rastreada.

ğŸ§  Pregunta 109

Si un equipo desea integrar los cambios de una rama de caracterÃ­stica en la rama principal, manteniendo un registro explÃ­cito de cuÃ¡ndo ocurriÃ³ esta integraciÃ³n en el historial Â¿QuÃ© estrategia de merge deberÃ­an utilizar

A. Merge con Fast-Forward
B. Merge sin Fast-Forward (--no-ff)
C. Squash merge
D. Rebase

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: El merge sin Fast-Forward (--no-ff) siempre crea un nuevo commit de merge, incluso si la fusiÃ³n podrÃ­a realizarse con un Fast-Forward Esto registra explÃ­citamente en el historial cuÃ¡ndo se integrÃ³ la rama de caracterÃ­stica.

ğŸ§  Pregunta 110

Â¿QuÃ© herramienta de Git permite realizar una bÃºsqueda binaria a travÃ©s del historial de commits para encontrar el commit que introdujo un error

A. git log --grep
B. git blame
C. git bisect
D. git diff

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: git bisect ayuda a encontrar el commit que introdujo un error al permitir marcar commits como "buenos" o "malos" y reduciendo el rango de bÃºsqueda a la mitad en cada paso.


ğŸ§  Pregunta 111

Un desarrollador quiere aplicar los cambios de un commit especÃ­fico de otra rama a su rama actual, sin fusionar toda la otra rama Â¿QuÃ© comando de Git deberÃ­a utilizar

A. git merge &lt;otra_rama>
B. git checkout &lt;otra_rama> -- &lt;archivo>
C. git cherry-pick &lt;hash_del_commit>
D. git rebase &lt;otra_rama>

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: El comando git cherry-pick <hash_del_commit> permite aplicar los cambios introducidos por un commit especÃ­fico a la rama actual.

ğŸ§  Pregunta 112

Â¿CuÃ¡l es la principal diferencia entre un "submÃ³dulo" y un "subtree" en Git para la gestiÃ³n de proyectos dependientes

A. Un submÃ³dulo copia el cÃ³digo del proyecto dependiente al proyecto principal, mientras que un subtree mantiene una referencia externa
B. Un subtree integra el historial del proyecto dependiente en el historial del proyecto principal, mientras que un submÃ³dulo mantiene una referencia a un commit especÃ­fico
C. Un submÃ³dulo es mÃ¡s fÃ¡cil de actualizar que un subtree
D. Un subtree siempre requiere una conexiÃ³n de red para acceder al cÃ³digo dependiente

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: Un subtree integra el contenido del repositorio externo directamente en el Ã¡rbol del proyecto principal, incluyendo su historial Un submÃ³dulo, en cambio, mantiene una referencia a un commit especÃ­fico del repositorio externo, sin integrar su historial completo.

ğŸ§  Pregunta 113

DespuÃ©s de realizar varios commits locales, un desarrollador se da cuenta de que el mensaje del Ãºltimo commit es incorrecto Â¿QuÃ© comando de Git le permitirÃ­a modificar el mensaje del Ãºltimo commit sin alterar su contenido

A. git commit --amend -m "&lt;nuevo_mensaje>"
B. git reword HEAD
C. git reset HEAD~1
D. git update-ref HEAD^ &lt;nuevo_mensaje>

âœ… Correcta: A

ğŸ§¾ ExplicaciÃ³n: El comando git commit --amend -m "<nuevo_mensaje>" permite modificar el mensaje del Ãºltimo commit realizado. Si no se especifica -m, se abrirÃ¡ el editor de texto para modificar el mensaje.

ğŸ§  Pregunta 114

En un flujo de trabajo de git bisect, despuÃ©s de probar un commit y determinar que el error aÃºn estÃ¡ presente Â¿QuÃ© comando se debe ejecutar para informar a Git y continuar la bÃºsqueda

A. git bisect good
B. git bisect skip
C. git bisect bad
D. git bisect reset

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: El comando git bisect bad se utiliza para marcar el commit actual como uno que contiene el error, permitiendo a Git reducir el rango de commits a examinar en la bÃºsqueda binaria.

ğŸ§  Pregunta 115

Â¿CuÃ¡l de las siguientes opciones describe mejor el propÃ³sito de un "hook" en Git

A. Una forma de crear alias para comandos de Git complejos
B. Un mecanismo para personalizar el comportamiento de Git durante puntos clave de su ejecuciÃ³n
C. Una herramienta para visualizar el historial de commits de forma grÃ¡fica
D. Un mÃ©todo para cifrar el contenido de los repositorios Git

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: Los hooks de Git son scripts que Git puede ejecutar automÃ¡ticamente antes o despuÃ©s de ciertos eventos, como antes de un commit (pre-commit) o despuÃ©s de recibir un push (post-receive), permitiendo personalizar el flujo de trabajo.

ğŸ§  Pregunta 116

Un equipo quiere asegurarse de que todos los mensajes de commit sigan un formato especÃ­fico Â¿QuÃ© tipo de hook de Git serÃ­a el mÃ¡s apropiado para implementar esta validaciÃ³n

A. pre-receive
B. post-commit
C. pre-push
D. commit-msg

âœ… Correcta: D

ğŸ§¾ ExplicaciÃ³n: El hook commit-msg se ejecuta justo antes de que se acepte un mensaje de commit. Permite leer el mensaje, validarlo segÃºn un patrÃ³n y rechazar el commit si no cumple con los requisitos.

ğŸ§  Pregunta 117

Â¿CuÃ¡l es el resultado de ejecutar el comando git reset --soft HEAD~2

A. Elimina los Ãºltimos dos commits del historial y del Ã¡rea de staging
B. Mueve la punta de la rama actual dos commits hacia atrÃ¡s, pero mantiene los cambios de esos commits en el Ã¡rea de staging
C. Revierte los cambios introducidos por los Ãºltimos dos commits y crea un nuevo commit de reversiÃ³n
D. Elimina los Ãºltimos dos commits del historial local y remoto

âœ… Correcta: B

ğŸ§¾ ExplicaciÃ³n: git reset --soft HEAD~2 mueve el puntero de la rama actual dos commits hacia atrÃ¡s, pero los cambios realizados en esos commits permanecen en el Ã¡rea de staging y en el directorio de trabajo, listos para ser commiteados nuevamente.

ğŸ§  Pregunta 118

En un proyecto que utiliza subtrees, Â¿cÃ³mo se actualiza el contenido del subtree a la Ãºltima versiÃ³n de la rama principal del repositorio original del subtree

A. Navegando al directorio del subtree y ejecutando git pull
B. Utilizando el comando git submodule update --remote <prefijo_del_subtree>
C. Utilizando el comando git subtree pull --prefix=<prefijo_del_subtree> <url_del_repositorio> <rama>
D. Ejecutando git fetch <url_del_repositorio> y luego fusionando manualmente

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: El comando git subtree pull es la forma recomendada de integrar cambios desde el repositorio original de un subtree al proyecto principal, especificando el prefijo, la URL del repositorio y la rama a integrar.

ğŸ§  Pregunta 119

Â¿CuÃ¡l es la principal diferencia entre git merge y git rebase cuando se integran los cambios de una rama de caracterÃ­stica a la rama principal en tÃ©rminos del historial resultante

A. git merge crea un nuevo commit de merge, mientras que git rebase no modifica el historial
B. git rebase crea un nuevo commit de merge, mientras que git merge aÃ±ade los commits directamente
C. git merge aÃ±ade un commit de merge al historial, mientras que git rebase mueve la base de la rama de caracterÃ­stica y crea un historial lineal
D. No hay una diferencia significativa en el historial resultante

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: git merge une las historias de las ramas creando un nuevo commit de merge git rebase mueve la base de la rama de caracterÃ­stica al HEAD de la rama principal y reproduce los commits de la caracterÃ­stica, creando un historial lineal.

ğŸ§  Pregunta 120

Si un desarrollador desea ver una lista de todos los commits que han modificado una lÃ­nea especÃ­fica de un archivo Â¿QuÃ© comando de Git podrÃ­a utilizar

A. git log -S "&lt;patrÃ³n_de_la_lÃ­nea>" &lt;archivo>
B. git blame &lt;archivo>
C. git log -L &lt;nÃºmero_de_lÃ­nea>,&lt;nÃºmero_de_lÃ­nea>:&lt;archivo>
D. git diff &lt;archivo>

âœ… Correcta: C

ğŸ§¾ ExplicaciÃ³n: El comando git log -L <nÃºmero_de_lÃ­nea>,<nÃºmero_de_lÃ­nea>:<archivo> permite rastrear los cambios realizados en una lÃ­nea especÃ­fica (o rango de lÃ­neas) de un archivo a lo largo del historial de commits.