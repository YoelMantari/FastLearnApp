ğŸ§  Pregunta 1

Â¿CuÃ¡l es el propÃ³sito principal del comando git rebase -i?

A. Fusionar ramas de manera automÃ¡tica
B. Reescribir la historia reciente de commits de forma controlada
C. Eliminar ramas remotas
D. Hacer un merge sin conflictos

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git rebase -i (interactivo) permite modificar, combinar o eliminar commits recientes para dejar un historial mÃ¡s claro y limpio, especialmente antes de hacer merge o push.

ğŸ§  Pregunta 2

Â¿QuÃ© acciÃ³n realiza el comando squash durante un rebase interactivo?

A. Elimina el commit completamente
B. Fusiona el commit con el anterior, manteniendo ambos mensajes
C. Pausa el proceso para editar el cÃ³digo
D. Renombra el commit

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: squash combina el commit con el anterior y te permite editar el mensaje combinado. Es Ãºtil para unir varios commits triviales en uno mÃ¡s significativo.

ğŸ§  Pregunta 3

Â¿Por quÃ© se recomienda no usar rebase -i en ramas compartidas que ya fueron enviadas a remoto?

A. Porque elimina los commits anteriores
B. Porque puede hacer el rebase mÃ¡s lento
C. Porque reescribe el historial, causando conflictos en otros colaboradores
D. Porque impide hacer push despuÃ©s

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al reescribir el historial de una rama compartida, los colaboradores pueden tener conflictos al sincronizar sus versiones locales, lo que puede desorganizar el proyecto.

ğŸ§  Pregunta 4

Â¿CuÃ¡l es la principal ventaja de usar git merge --no-ff?

A. Elimina conflictos automÃ¡ticamente
B. Crea mÃºltiples commits de fusiÃ³n
C. Obliga a Git a crear un commit de merge incluso si no es necesario
D. Borra el historial de la rama

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: --no-ff asegura que siempre se genere un commit de merge, lo cual permite preservar el historial de la rama fusionada y mejora la trazabilidad del proyecto.

ğŸ§  Pregunta 5

Â¿CuÃ¡l es una limitaciÃ³n clave del Octopus Merge?

A. Solo funciona en sistemas Linux
B. Requiere internet para funcionar
C. No permite resolver conflictos manualmente
D. Solo puede fusionar dos ramas a la vez

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El Octopus Merge estÃ¡ diseÃ±ado para ramas que no presentan conflictos. Si hay algÃºn conflicto, Git aborta el merge, ya que no permite resoluciÃ³n manual en este caso.

ğŸ§  Pregunta 6

Â¿QuÃ© hace la opciÃ³n --graph del comando git log?

A. Muestra el Ã¡rbol de directorios
B. Imprime los archivos modificados
C. Representa grÃ¡ficamente la estructura del historial de commits
D. Muestra solo el Ãºltimo commit

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: --graph dibuja una representaciÃ³n visual de las ramas y fusiones en el historial, Ãºtil para entender la evoluciÃ³n del proyecto.

ğŸ§  Pregunta 7

Â¿CuÃ¡l es el propÃ³sito de git bisect?

A. Fusionar ramas automÃ¡ticamente
B. Encontrar el commit que introdujo un error usando bÃºsqueda binaria
C. Reescribir el historial de commits
D. Ver los cambios lÃ­nea por lÃ­nea en un archivo

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git bisect utiliza bÃºsqueda binaria para encontrar el commit exacto que introdujo un fallo, siendo muy Ãºtil para depuraciÃ³n en proyectos grandes.

ğŸ§  Pregunta 8

Â¿QuÃ© comando permite rastrear todos los movimientos de HEAD y otras referencias, incluso despuÃ©s de un reset?

A. git bisect
B. git log
C. git reflog
D. git blame

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git reflog registra todos los movimientos de HEAD, incluidos los que no aparecen en git log, permitiendo recuperar estados anteriores o ramas eliminadas.

ğŸ§  Pregunta 9

Â¿CuÃ¡l es la diferencia principal entre submÃ³dulo y subtree?

A. Los subtrees requieren conexiÃ³n a internet, los submÃ³dulos no
B. Los subtrees integran el cÃ³digo completo, los submÃ³dulos solo una referencia
C. Los subtrees no permiten trabajar en ramas
D. No hay diferencia funcional entre ambos

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un submÃ³dulo mantiene solo una referencia al otro repo, mientras que un subtree incorpora todo el contenido (y opcionalmente su historial) al repositorio principal.

ğŸ§  Pregunta 10

Â¿CuÃ¡l de las siguientes afirmaciones sobre git blame es correcta?

A. Sirve para borrar lÃ­neas obsoletas de cÃ³digo
B. Solo muestra el autor del Ãºltimo commit del archivo completo
C. Asocia cada lÃ­nea de un archivo con el commit que la modificÃ³ por Ãºltima vez
D. Reescribe el contenido del archivo lÃ­nea por lÃ­nea

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git blame muestra quiÃ©n modificÃ³ cada lÃ­nea de un archivo, cuÃ¡ndo lo hizo y quÃ© commit fue responsable, lo que lo convierte en una herramienta clave para depuraciÃ³n y auditorÃ­a.

ğŸ§  Pregunta 11

Â¿CuÃ¡l es la acciÃ³n del comando fixup en un rebase interactivo?

A. Elimina el commit afectado
B. Fusiona con el commit anterior y conserva ambos mensajes
C. Fusiona con el commit anterior y descarta el mensaje del actual
D. Pausa el rebase para editar el mensaje

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: fixup combina el commit con el anterior, pero descarta su mensaje, dejÃ¡ndolo solo como parte tÃ©cnica sin aÃ±adir informaciÃ³n adicional al historial.

ğŸ§  Pregunta 12

Â¿CuÃ¡ndo es recomendable usar git log --graph --decorate --oneline?

A. Solo despuÃ©s de hacer pull
B. Cuando se desea analizar rÃ¡pidamente la estructura del historial
C. Para eliminar ramas obsoletas
D. Para listar archivos modificados

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Esta combinaciÃ³n de opciones permite visualizar de forma compacta y grÃ¡fica el historial de commits, ideal para auditorÃ­a, revisiones o anÃ¡lisis antes de un merge.

ğŸ§  Pregunta 13

Â¿QuÃ© comando permite conocer todos los commits que han modificado una funciÃ³n especÃ­fica?

A. git blame
B. git reset
C. git log -L :nombre_funcion:archivo
D. git bisect good

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git log -L :funciÃ³n:archivo muestra la evoluciÃ³n de una funciÃ³n, commit por commit, siendo clave para entender su historia y propÃ³sito.

ğŸ§  Pregunta 14

Â¿QuÃ© caracterÃ­stica distingue al comando git blame frente a git log?

A. Muestra los commits en forma compacta
B. Identifica el autor por cada lÃ­nea de cÃ³digo
C. Elimina lÃ­neas redundantes del cÃ³digo
D. Fusiona ramas sin conflictos

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git blame permite rastrear lÃ­nea por lÃ­nea quiÃ©n hizo cada cambio y cuÃ¡ndo, mientras que git log muestra commits completos sin ese nivel de detalle.

ğŸ§  Pregunta 15

Â¿QuÃ© beneficio aporta el uso de --squash al agregar un subtree?

A. Se fusionan ramas automÃ¡ticamente
B. El cÃ³digo externo se elimina al final del merge
C. Se evita traer todo el historial del repositorio externo
D. Se eliminan los archivos duplicados del subtree

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n --squash reduce el historial del repositorio externo a un Ãºnico commit, lo que hace mÃ¡s liviano y limpio el historial del repositorio principal.

ğŸ§  Pregunta 16

Â¿CuÃ¡l es una ventaja clave de usar submÃ³dulos en Git?

A. Se puede editar el cÃ³digo externo desde el repositorio principal
B. Evitan tener que clonar mÃºltiples proyectos
C. Permiten mantener dependencias externas separadas y versionadas
D. Fusionan todos los repositorios automÃ¡ticamente

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los submÃ³dulos enlazan otros repositorios sin mezclar su cÃ³digo, lo que facilita mantener dependencias externas bien separadas y actualizadas.

ğŸ§  Pregunta 17

Â¿CuÃ¡l es el propÃ³sito de git bisect good?

A. SeÃ±alar que un commit funciona correctamente
B. Eliminar commits defectuosos
C. Confirmar el merge entre ramas
D. Borrar el historial intermedio

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Durante el proceso de git bisect, marcar un commit como "good" ayuda a Git a reducir el rango de bÃºsqueda hasta encontrar el que introdujo un error.

ğŸ§  Pregunta 18

Â¿Para quÃ© sirve el archivo .gitmodules en un proyecto con submÃ³dulos?

A. Para definir ramas protegidas
B. Para almacenar los cambios locales
C. Para registrar la configuraciÃ³n de los submÃ³dulos usados
D. Para hacer backup del repositorio

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: .gitmodules contiene las rutas y URLs de los submÃ³dulos incluidos en el proyecto, lo que permite a otros desarrolladores clonarlos y actualizarlos correctamente.

ğŸ§  Pregunta 19

Â¿QuÃ© diferencia clave tienen los subtrees frente a los submÃ³dulos?

A. No requieren conexiÃ³n a internet
B. Permiten commits locales sobre el cÃ³digo externo integrado
C. No pueden incluir cÃ³digo externo
D. No se pueden actualizar despuÃ©s de integrarlos

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: A diferencia de los submÃ³dulos, los subtrees permiten trabajar directamente sobre el cÃ³digo integrado, hacer commits, y sincronizarlo despuÃ©s sin cambiar de contexto.

ğŸ§  Pregunta 20

Â¿CuÃ¡l es una de las funciones del comando git reflog?

A. Ver quiÃ©n escribiÃ³ cada lÃ­nea de cÃ³digo
B. Identificar conflictos entre ramas
C. Recuperar estados anteriores que no aparecen en git log
D. Fusionar mÃºltiples ramas en un solo commit

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git reflog mantiene un registro de todas las referencias movidas localmente, incluyendo operaciones destructivas como reset --hard, lo que permite restaurar estados perdidos.

ğŸ§  Pregunta 21

Â¿QuÃ© comando en Git permite eliminar completamente un commit durante un rebase interactivo?

A. squash
B. fixup
C. drop
D. reword

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al usar drop en un rebase interactivo, Git eliminarÃ¡ ese commit del historial como si nunca hubiese existido.

ğŸ§  Pregunta 22

Â¿CuÃ¡l de los siguientes comandos muestra grÃ¡ficamente las ramas, etiquetas y commits en forma compacta?

A. git log --pretty
B. git log --graph --decorate --oneline
C. git status
D. git show

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Este comando combina visualizaciÃ³n del Ã¡rbol (--graph), etiquetas (--decorate) y un formato reducido por lÃ­nea (--oneline), ideal para revisiÃ³n rÃ¡pida.

ğŸ§  Pregunta 23

Â¿QuÃ© debe hacerse antes de ejecutar un Octopus Merge?

A. Borrar los submÃ³dulos
B. Confirmar que no haya conflictos entre las ramas
C. Ejecutar git blame
D. Eliminar los commits triviales

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El Octopus Merge no permite resoluciÃ³n de conflictos, por lo que es crucial asegurarse de que todas las ramas puedan integrarse sin colisiones.

ğŸ§  Pregunta 24

Â¿QuÃ© opciÃ³n permite ver el reflog de una rama especÃ­fica en lugar del HEAD?

A. git reflog -b <rama>
B. git reflog show <rama>
C. git reflog --branch <rama>
D. git reflog only <rama>

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git reflog show <rama> muestra los movimientos de una rama especÃ­fica, Ãºtil para analizar cambios locales incluso si no estÃ¡n en el historial visible.

ğŸ§  Pregunta 25

Â¿CuÃ¡l es el comando correcto para recuperar una rama eliminada usando reflog?

A. git clone reflog
B. git reset branch
C. git checkout -b <nombre> <hash_encontrado>
D. git pull origin <hash_encontrado>

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al encontrar el commit perdido en git reflog, puedes restaurar la rama eliminada creando una nueva rama apuntando a ese commit con git checkout -b.

ğŸ§  Pregunta 26

Â¿CuÃ¡l es una diferencia clave entre reword y edit en un rebase interactivo?

A. edit elimina el commit, reword lo mantiene
B. reword cambia el contenido del commit, edit cambia el mensaje
C. edit permite modificar el contenido del commit, reword solo el mensaje
D. No hay diferencia, ambos hacen lo mismo

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: reword permite cambiar Ãºnicamente el mensaje del commit, mientras que edit detiene el rebase para que puedas modificar el contenido del commit (archivos, cÃ³digo, etc.).

ğŸ§  Pregunta 27

Â¿QuÃ© sucede si intentas hacer un rebase -i sobre una rama que ya fue enviada a remoto y compartida?

A. El rebase se cancela automÃ¡ticamente
B. El historial se reescribe y puede causar conflictos para otros
C. La rama se borra del remoto
D. Git actualiza los commits sin afectar a los demÃ¡s

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Reescribir el historial de una rama compartida puede generar conflictos para otros colaboradores, ya que los commits originales dejan de existir en su forma previa.

ğŸ§  Pregunta 28

Â¿CuÃ¡l es el objetivo principal del comando git log -L?

A. Eliminar lÃ­neas de cÃ³digo de un archivo
B. Ver la historia de modificaciones de una funciÃ³n o rango de lÃ­neas
C. Recuperar ramas eliminadas
D. Fusionar ramas desde mÃºltiples orÃ­genes

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git log -L permite rastrear los cambios realizados a una funciÃ³n o secciÃ³n especÃ­fica del cÃ³digo, mostrando cÃ³mo ha evolucionado a lo largo del tiempo.

ğŸ§  Pregunta 29

Â¿QuÃ© acciÃ³n realiza git submodule update --init --recursive?

A. Sincroniza los cambios de todos los subtrees
B. Borra los submÃ³dulos
C. Clona y actualiza todos los submÃ³dulos y sus submÃ³dulos anidados
D. Comprime el historial de los submÃ³dulos

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Este comando descarga e inicializa todos los submÃ³dulos del proyecto, incluyendo los submÃ³dulos dentro de submÃ³dulos si los hay (anidados).

ğŸ§  Pregunta 30

Â¿QuÃ© ventaja ofrece el uso de git bisect frente a una revisiÃ³n manual del historial?

A. Permite editar directamente los commits defectuosos
B. Restaura commits eliminados automÃ¡ticamente
C. Encuentra el commit que introdujo un error usando bÃºsqueda binaria
D. Integra pruebas automatizadas automÃ¡ticamente

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git bisect reduce significativamente el nÃºmero de pasos necesarios para encontrar el commit problemÃ¡tico aplicando el principio de bÃºsqueda binaria sobre el historial.

