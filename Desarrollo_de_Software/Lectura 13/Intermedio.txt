ğŸ§  Pregunta 1
Â¿CuÃ¡l es la principal funciÃ³n de los hooks de Git?

A. Modificar el historial de commits despuÃ©s de ser realizados.
B. Ejecutar scripts automÃ¡ticamente en respuesta a eventos del control de versiones.
C. Clonar repositorios remotos de forma mÃ¡s eficiente.
D. Visualizar el Ã¡rbol de commits de manera grÃ¡fica.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks son scripts que Git ejecuta automÃ¡ticamente en momentos especÃ­ficos del proceso de control de versiones, como antes de un commit o despuÃ©s de un push.

ğŸ§  Pregunta 2
Â¿QuÃ© tipo de hook de Git se ejecuta antes de que se realice un commit y para quÃ© se utiliza comÃºnmente?

A. post-commit, para notificar a sistemas externos.
B. pre-push, para realizar validaciones de seguridad en el servidor.
C. pre-commit, para validar el cÃ³digo o el estilo antes de la confirmaciÃ³n.
D. commit-msg, para modificar el mensaje del commit despuÃ©s de ser escrito.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-commit se ejecuta justo antes de crear un commit y es Ãºtil para asegurar la calidad del cÃ³digo mediante comprobaciones de estilo o la ejecuciÃ³n de pruebas unitarias.

ğŸ§  Pregunta 3
SegÃºn el ejemplo proporcionado, Â¿quÃ© valida el hook commit-msg?

A. Que no haya errores de sintaxis en los archivos commiteados.
B. Que el mensaje del commit tenga al menos 15 caracteres.
C. Que se hayan ejecutado todas las pruebas unitarias.
D. Que los archivos commiteados cumplan con un estÃ¡ndar de formato especÃ­fico.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El ejemplo del hook commit-msg verifica que la longitud del mensaje del commit sea de al menos 15 caracteres, promoviendo descripciones mÃ¡s detalladas de los cambios.

ğŸ§  Pregunta 4
Â¿En quÃ© situaciones se considera necesario reescribir la historia de Git?

A. Para fusionar ramas de forma mÃ¡s rÃ¡pida.
B. Para mejorar el rendimiento del repositorio local.
C. Para remover informaciÃ³n sensible o limpiar commits innecesarios.
D. Para cambiar el autor de commits antiguos.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Reescribir la historia es Ãºtil para tareas como eliminar datos confidenciales que se hayan aÃ±adido por error o para simplificar el historial de commits, haciÃ©ndolo mÃ¡s coherente.

ğŸ§  Pregunta 5
Â¿CuÃ¡l es una desventaja importante de utilizar git filter-branch para reescribir la historia?

A. No permite eliminar archivos grandes del historial.
B. Es una herramienta muy sencilla y fÃ¡cil de usar.
C. Puede generar conflictos, especialmente en equipos, y ser lenta en repositorios grandes.
D. No afecta los identificadores (hashes) de los commits.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Aunque poderosa, git filter-branch puede ser compleja, lenta en repositorios grandes y propensa a errores, ademÃ¡s de generar problemas de sincronizaciÃ³n al alterar los hashes de los commits.

ğŸ§  Pregunta 6
Â¿QuÃ© ventaja principal ofrece BFG Repo-Cleaner en comparaciÃ³n con git filter-branch?

A. Mayor control sobre la reescritura de la historia.
B. Capacidad para modificar el autor de commits antiguos.
C. Mayor velocidad y facilidad de uso para tareas comunes de limpieza.
D. No requiere ejecutar comandos adicionales para limpiar el repositorio.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: BFG Repo-Cleaner estÃ¡ diseÃ±ada para ser mÃ¡s rÃ¡pida y sencilla de usar que git filter-branch en casos comunes como la eliminaciÃ³n de archivos grandes o sensibles.

ğŸ§  Pregunta 7
Â¿QuÃ© permite la funcionalidad de worktrees en Git?

A. Clonar un repositorio mÃºltiples veces en diferentes directorios.
B. Trabajar en varias ramas simultÃ¡neamente sin cambiar de directorio de trabajo.
C. Visualizar las diferencias entre ramas de forma grÃ¡fica.
D. Ejecutar comandos de Git en segundo plano.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los worktrees permiten tener mÃºltiples directorios de trabajo vinculados al mismo repositorio, facilitando el trabajo en paralelo en diferentes ramas sin necesidad de cambiar de directorio.

ğŸ§  Pregunta 8
Â¿CuÃ¡l es el comando de Git utilizado para crear un nuevo worktree y opcionalmente una nueva rama asociada?

A. git clone --worktree
B. git branch --worktree
C. git worktree add
D. git checkout -b --worktree

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El comando git worktree add se utiliza para crear un nuevo worktree y se puede usar la opciÃ³n -b para crear una nueva rama asociada a ese worktree.

ğŸ§  Pregunta 9
Â¿Para quÃ© se utilizan los alias en la configuraciÃ³n de Git?

A. Para crear ramas remotas.
B. Para definir flujos de trabajo complejos.
C. Para ejecutar comandos de Git de forma mÃ¡s rÃ¡pida y abreviada.
D. Para configurar la interfaz grÃ¡fica de Git.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias son atajos definidos en la configuraciÃ³n de Git que permiten a los usuarios ejecutar comandos comunes de manera mÃ¡s eficiente utilizando nombres mÃ¡s cortos o personalizados.

ğŸ§  Pregunta 10
SegÃºn el texto, Â¿cÃ³mo se puede automatizar la ejecuciÃ³n de pruebas unitarias antes de enviar cambios a un repositorio remoto?

A. Utilizando alias compuestos en la configuraciÃ³n global.
B. Configurando el hook post-commit para ejecutar los tests.
C. Implementando un script en el hook pre-push que ejecute la baterÃ­a de pruebas.
D. Programando tareas automÃ¡ticas directamente en la interfaz de Git.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-push se ejecuta antes de enviar los cambios al repositorio remoto, lo que lo convierte en el lugar ideal para automatizar la ejecuciÃ³n de pruebas unitarias y evitar la integraciÃ³n de cÃ³digo defectuoso.

ğŸ§  Pregunta 11
Â¿DÃ³nde se almacenan los scripts de los hooks de Git dentro de un repositorio?

A. En la raÃ­z del repositorio.
B. En el directorio .git/hooks.
C. En la configuraciÃ³n global de Git (~/.gitconfig).
D. En el directorio .git/info/hooks.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El directorio .git/hooks dentro de la carpeta .git de cada repositorio es donde se encuentran los archivos de los hooks.

ğŸ§  Pregunta 12
Â¿CuÃ¡l es la diferencia principal entre los hooks del lado del cliente y los hooks del lado del servidor?

A. Los del cliente se ejecutan en la mÃ¡quina remota y los del servidor en la local.
B. Los del cliente se utilizan para tareas de integraciÃ³n continua y los del servidor para validaciÃ³n local.
C. Los del cliente se ejecutan en la mÃ¡quina del desarrollador y los del servidor en un servidor remoto.
D. No hay diferencia funcional, solo en la ubicaciÃ³n de los scripts.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los hooks del lado del cliente se ejecutan en el entorno del desarrollador, mientras que los del lado del servidor se activan en el servidor que aloja el repositorio remoto.

ğŸ§  Pregunta 13
Â¿QuÃ© permiso se debe modificar en un archivo de hook para que Git lo ejecute?

A. Permiso de lectura.
B. Permiso de escritura.
C. Permiso de ejecuciÃ³n.
D. Permiso de modificaciÃ³n.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Para que Git pueda ejecutar un script de hook, el archivo debe tener permiso de ejecuciÃ³n, lo cual se puede establecer con el comando chmod +x <nombre_del_hook>.

ğŸ§  Pregunta 14
Â¿QuÃ© tipo de validaciÃ³n se podrÃ­a implementar en un hook pre-commit ademÃ¡s de la comprobaciÃ³n de sintaxis en archivos Python?

A. Forzar la inclusiÃ³n de un ticket de seguimiento en el mensaje del commit.
B. Ejecutar automÃ¡ticamente el push al repositorio remoto.
C. Modificar el autor del commit.
D. Eliminar archivos del Ã¡rea de staging.

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Un hook pre-commit puede ser utilizado para verificar que el mensaje del commit siga un formato especÃ­fico, como incluir un nÃºmero de ticket de seguimiento.

ğŸ§  Pregunta 15
Â¿CuÃ¡l es el propÃ³sito del hook post-commit?

A. Validar el mensaje del commit antes de guardarlo.
B. Ejecutar tareas despuÃ©s de que un commit ha sido realizado.
C. Prevenir la creaciÃ³n de commits con errores.
D. Modificar los archivos incluidos en el commit.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook post-commit se ejecuta una vez que el commit se ha completado y se utiliza para realizar acciones posteriores, como notificaciones o actualizaciones.

ğŸ§  Pregunta 16
Â¿QuÃ© riesgo principal existe al reescribir la historia de Git en un repositorio compartido?

A. PÃ©rdida de la configuraciÃ³n local de los desarrolladores.
B. DesincronizaciÃ³n y conflictos para otros colaboradores.
C. Aumento del tamaÃ±o del repositorio remoto.
D. Incompatibilidad con versiones anteriores de Git.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Reescribir la historia altera los hashes de los commits, lo que puede causar problemas de sincronizaciÃ³n y requerir que otros colaboradores fuerzen la actualizaciÃ³n de sus ramas locales.

ğŸ§  Pregunta 17
Â¿QuÃ© opciÃ³n de git filter-branch se utiliza para eliminar commits que quedan vacÃ­os despuÃ©s de aplicar un filtro?

A. --force
B. --index-filter
C. --prune-empty
D. --tag-name-filter cat

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n --prune-empty de git filter-branch estÃ¡ diseÃ±ada para eliminar aquellos commits que no contienen cambios despuÃ©s de aplicar el filtro especificado.

ğŸ§  Pregunta 18
DespuÃ©s de usar BFG Repo-Cleaner para eliminar archivos sensibles, Â¿quÃ© comandos adicionales se recomienda ejecutar para limpiar completamente el repositorio?

A. git clean -fdx && git reset --hard origin/main
B. git reflog expire --expire=now --all && git gc --prune=now --aggressive
C. git stash save --keep-index && git checkout main
D. git update-index --again && git submodule sync

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: DespuÃ©s de que BFG reescribe la historia, es necesario usar git reflog expire y git gc para eliminar de forma definitiva los objetos antiguos y reducir el tamaÃ±o del repositorio.

ğŸ§  Pregunta 19
Â¿CuÃ¡l es el principal beneficio de usar worktrees en un flujo de desarrollo?

A. Permite tener mÃºltiples copias completas del repositorio local.
B. Facilita la ediciÃ³n simultÃ¡nea del mismo archivo en diferentes ramas.
C. Permite trabajar en varias ramas al mismo tiempo sin interferir entre sÃ­ en el directorio de trabajo.
D. Reduce la necesidad de realizar commits frecuentes.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los worktrees aÃ­slan los entornos de trabajo para diferentes ramas, permitiendo trabajar en paralelo sin tener que cambiar constantemente de rama en el mismo directorio.

ğŸ§  Pregunta 20
Â¿QuÃ© comando se utiliza para ver la lista de todos los worktrees asociados a un repositorio?

A. git branch --list
B. git worktree status
C. git worktree list
D. git branch -v --all

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El comando git worktree list muestra todos los worktrees activos para el repositorio actual, junto con la rama que cada uno tiene asociada.

ğŸ§  Pregunta 21
Antes de eliminar un worktree, Â¿quÃ© precauciÃ³n se menciona en el texto?

A. Asegurarse de haber fusionado todos los cambios con la rama principal.
B. Verificar que el worktree estÃ© limpio (sin cambios pendientes).
C. Realizar un backup completo del repositorio.
D. Notificar a todos los colaboradores del repositorio.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Es importante asegurarse de que el worktree no contenga cambios sin commitear antes de removerlo para evitar la pÃ©rdida de trabajo.

ğŸ§  Pregunta 22
En el ejemplo de uso de worktrees, Â¿quÃ© hace la opciÃ³n -b en el comando git worktree add -b feature-x ../feature-x-worktree origin/master?

A. Crea un nuevo worktree basado en la rama feature-x.
B. Crea una nueva rama llamada feature-x y la asocia al nuevo worktree.
C. Cambia a la rama feature-x en el worktree principal.
D. Borra la rama feature-x antes de crear el worktree.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n -b seguida de un nombre de rama crea una nueva rama con ese nombre (en este caso, feature-x) basada en la rama especificada al final del comando (origin/master) y la asocia al nuevo worktree.

ğŸ§  Pregunta 23
Â¿DÃ³nde se definen los alias de Git?

A. En los archivos de hook dentro de .git/hooks.
B. En el archivo .gitignore del repositorio.
C. En el archivo de configuraciÃ³n global (~/.gitconfig) o en el del repositorio (.git/config).
D. En los metadatos de cada commit.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias de Git se configuran en el archivo de configuraciÃ³n global del usuario o en el archivo de configuraciÃ³n especÃ­fico del repositorio.

ğŸ§  Pregunta 24
Â¿QuÃ© hace el alias git lg = log --oneline --graph --decorate --all?

A. Muestra un log detallado con todos los cambios en cada archivo.
B. Presenta la historia de commits de forma concisa, con un grÃ¡fico de ramas y etiquetas.
C. Permite editar el Ãºltimo mensaje del commit.
D. Lista todos los alias configurados en Git.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Este alias crea un comando abreviado (git lg) que muestra el historial de commits en una sola lÃ­nea, con una representaciÃ³n grÃ¡fica de las ramas y decoraciones como etiquetas y referencias.

ğŸ§  Pregunta 25
Â¿Para quÃ© se utiliza la configuraciÃ³n core.editor en Git?

A. Para definir el estilo de resaltado de la sintaxis en las diffs.
B. Para especificar el editor de texto que Git debe usar para mensajes de commit, etc.
C. Para configurar la herramienta de merge por defecto.
D. Para personalizar la salida de los comandos de Git en la terminal.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La configuraciÃ³n core.editor permite al usuario especificar quÃ© editor de texto se abrirÃ¡ cuando Git necesite que se ingrese texto, como al escribir mensajes de commit.

ğŸ§  Pregunta 26
Â¿QuÃ© herramienta se menciona en el texto como ejemplo para visualizar las diferencias entre commits mediante la configuraciÃ³n diff.tool?

A. vimdiff
B. meld
C. nano
D. gedit

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El texto menciona meld como una herramienta grÃ¡fica que se puede configurar como el diff.tool para visualizar las diferencias entre commits.

ğŸ§  Pregunta 27
Â¿CuÃ¡l es el objetivo principal de la automatizaciÃ³n en Git?

A. Reducir la complejidad de los comandos de Git.
B. Asegurar que todos los desarrolladores utilicen el mismo sistema operativo.
C. Reducir tareas repetitivas y asegurar la consistencia en los procesos.
D. Mejorar la velocidad de clonaciÃ³n de repositorios remotos.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La automatizaciÃ³n en Git busca minimizar la repeticiÃ³n de tareas y garantizar que ciertos procesos se sigan de manera uniforme, disminuyendo la posibilidad de errores.

ğŸ§  Pregunta 28
En el ejemplo del hook pre-push que ejecuta pruebas, Â¿quÃ© indica un resultado diferente de cero (!= 0) al ejecutar el script run_tests.sh?

A. Que las pruebas se ejecutaron correctamente.
B. Que hubo un error al ejecutar el script de pruebas.
C. Que al menos una de las pruebas unitarias fallÃ³.
D. Que no se encontraron pruebas para ejecutar.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Un cÃ³digo de salida diferente de cero generalmente indica que el programa o script terminÃ³ con un error. En este contexto, significa que una o mÃ¡s pruebas unitarias fallaron.

ğŸ§  Pregunta 29
Â¿QuÃ© permite el alias compuesto quickpush = "!f() { git add -A && git commit -m \"$1\" && git push; }; f"?

A. Realizar un commit sin necesidad de aÃ±adir los archivos previamente.
B. Ejecutar un commit y un push con un solo comando, aÃ±adiendo todos los cambios.
C. Enviar solo los cambios realizados en el Ãºltimo commit.
D. Crear un nuevo repositorio remoto y hacer push de la rama actual.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Este alias define un comando git quickpush "mensaje" que primero aÃ±ade todos los cambios al Ã¡rea de staging (git add -A), luego realiza un commit con el mensaje proporcionado (git commit -m "$1"), y finalmente sube los cambios al repositorio remoto (git push).

ğŸ§  Pregunta 30
Â¿CuÃ¡l es uno de los beneficios de utilizar scripts de configuraciÃ³n automatizada de Git en un entorno empresarial?

A. Asegurar que todos los desarrolladores utilicen la misma versiÃ³n de Git.
B. Configurar automÃ¡ticamente el entorno de Git con los parÃ¡metros corporativos y hooks personalizados en mÃºltiples mÃ¡quinas.
C. Optimizar el espacio de almacenamiento de los repositorios locales.
D. Simplificar la resoluciÃ³n de conflictos de merge.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los scripts de configuraciÃ³n automatizada permiten estandarizar el entorno de Git en todo el equipo, asegurando que se utilicen las configuraciones y hooks definidos por la empresa.

ğŸ§  Pregunta 31
Â¿QuÃ© sucede si un hook pre-commit devuelve un cÃ³digo de salida diferente de cero?

A. El commit se realiza pero se muestra una advertencia.
B. El commit se aborta y no se guarda ningÃºn cambio.
C. Git ignora el error y continÃºa con el commit.
D. Se revierte el Ãºltimo commit realizado.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Si un hook pre-commit finaliza con un cÃ³digo de salida distinto de cero, Git interpreta esto como un fallo y detiene el proceso de commit.

ğŸ§  Pregunta 32
Â¿CuÃ¡l de los siguientes hooks se ejecuta despuÃ©s de que los cambios han sido enviados a un repositorio remoto?

A. pre-push
B. post-push
C. pre-receive
D. post-receive

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook post-push se ejecuta despuÃ©s de que el comando git push se ha completado exitosamente.

ğŸ§  Pregunta 33
Â¿QuÃ© herramienta de limpieza de la historia de Git estÃ¡ escrita en Java y se considera mÃ¡s rÃ¡pida para ciertas tareas comunes?

A. git filter-branch
B. git rebase -i
C. BFG Repo-Cleaner
D. git clean

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: BFG Repo-Cleaner, al estar escrita en Java, suele ser mÃ¡s eficiente y rÃ¡pida que git filter-branch para tareas como la eliminaciÃ³n de archivos grandes o sensibles.

ğŸ§  Pregunta 34
DespuÃ©s de usar BFG, Â¿por quÃ© es necesario ejecutar git reflog expire y git gc?

A. Para volver a indexar los archivos modificados.
B. Para eliminar de forma permanente los objetos reescritos y optimizar el repositorio.
C. Para sincronizar los cambios con el repositorio remoto.
D. Para verificar la integridad de los archivos del repositorio.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Estos comandos son necesarios para asegurar que los objetos antiguos, que ya no son referenciados tras la reescritura de la historia por BFG, sean eliminados del reflog y del garbage collection, reduciendo el tamaÃ±o del repositorio.

ğŸ§  Pregunta 35
Â¿CuÃ¡ntos worktrees puede tener un repositorio de Git simultÃ¡neamente?

A. Solo uno, el directorio principal.
B. Dos, el principal y uno adicional.
C. Un nÃºmero limitado por la configuraciÃ³n del sistema operativo.
D. MÃºltiples, sin un lÃ­mite estricto impuesto por Git.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: Git permite tener mÃºltiples worktrees asociados a un Ãºnico repositorio, lo que facilita el trabajo en paralelo en diferentes ramas.

ğŸ§  Pregunta 36
Â¿QuÃ© comando se utiliza para eliminar (desasociar) un worktree?

A. git worktree delete
B. git worktree remove
C. git worktree prune
D. git worktree detach

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El comando git worktree remove se utiliza para desvincular y eliminar el directorio de trabajo de un worktree.

ğŸ§  Pregunta 37
Si intentas eliminar un worktree que contiene cambios sin commitear, Â¿quÃ© sucede?

A. El worktree se elimina automÃ¡ticamente, perdiÃ©ndose los cambios.
B. Git muestra una advertencia pero permite la eliminaciÃ³n.
C. Git impide la eliminaciÃ³n del worktree hasta que los cambios sean commiteados o guardados.
D. Los cambios se guardan automÃ¡ticamente en el worktree principal.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Git generalmente no permite eliminar un worktree que tiene cambios pendientes para evitar la pÃ©rdida accidental de trabajo.

ğŸ§  Pregunta 38
Â¿QuÃ© secciÃ³n del archivo .gitconfig se utiliza para definir los alias de Git?

A. [core]
B. [alias]
C. [remote]
D. [user]

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La secciÃ³n [alias] dentro del archivo de configuraciÃ³n de Git es donde se definen los atajos personalizados para los comandos.

ğŸ§  Pregunta 39
Â¿QuÃ© hace el alias git st segÃºn el ejemplo proporcionado?

A. Muestra las estadÃ­sticas del repositorio.
B. Realiza un stage de todos los cambios.
C. Muestra el estado actual del repositorio.
D. Crea una nueva etiqueta (tag).

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El alias st se configura comÃºnmente como una abreviatura del comando git status, que muestra el estado del Ã¡rea de trabajo y del Ã¡rea de staging.

ğŸ§  Pregunta 40
Â¿CuÃ¡l es la configuraciÃ³n de Git que permite manejar automÃ¡ticamente las diferencias de fin de lÃ­nea entre sistemas operativos?

A. core.autocrlf
B. core.safecrlf
C. core.eol
D. core.whitespace

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n core.autocrlf en la configuraciÃ³n de Git se utiliza para gestionar automÃ¡ticamente la conversiÃ³n de los caracteres de fin de lÃ­nea entre los diferentes sistemas operativos (como Windows y Unix).

ğŸ§  Pregunta 41
Â¿QuÃ© tipo de archivos son tÃ­picamente utilizados para escribir los scripts de los hooks de Git?

A. Archivos JSON
B. Archivos XML
C. Archivos de texto plano con lenguajes de scripting (como Bash, Python, Perl)
D. Archivos binarios compilados

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los hooks de Git son generalmente scripts escritos en lenguajes de scripting que pueden ser interpretados por el sistema operativo.

ğŸ§  Pregunta 42
Â¿CuÃ¡l es el hook que se ejecuta inmediatamente antes de recibir un push en un repositorio remoto?

A. pre-push
B. post-push
C. pre-receive
D. post-receive

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-receive se ejecuta en el servidor remoto justo al inicio del proceso de recepciÃ³n de un push.

ğŸ§  Pregunta 43
Â¿QuÃ© utilidad tiene la opciÃ³n --force en el comando git filter-branch?

A. Permite aplicar el filtro solo a la rama actual.
B. Permite la reescritura de la historia sin necesidad de confirmaciÃ³n.
C. Fuerza la eliminaciÃ³n de todos los worktrees asociados.
D. Obliga a Git a ignorar los archivos especificados en .gitignore.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n --force en git filter-branch permite realizar la reescritura de la historia sin que Git solicite confirmaciÃ³n, lo cual es necesario ya que es una operaciÃ³n potencialmente peligrosa.

ğŸ§  Pregunta 44
Â¿QuÃ© sucede con los tags al utilizar git filter-branch si no se especifica una opciÃ³n para manejarlos?

A. Los tags se eliminan automÃ¡ticamente.
B. Los tags no se modifican y pueden apuntar a commits antiguos.
C. Los tags se mueven automÃ¡ticamente a los nuevos commits.
D. Git requiere que se actualicen los tags manualmente despuÃ©s de la operaciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Si no se especifica una opciÃ³n como --tag-name-filter cat, los tags no se actualizan y pueden quedar apuntando a commits que han sido modificados o eliminados.

ğŸ§  Pregunta 45
Â¿CuÃ¡l es la principal limitaciÃ³n de los alias de Git?

A. Solo pueden abreviar comandos existentes, no crear lÃ³gica compleja.
B. Deben definirse globalmente y no pueden ser especÃ­ficos del repositorio.
C. No son compatibles con todas las versiones de Git.
D. Requieren un conocimiento avanzado de scripting para ser utilizados.

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Los alias de Git son simplemente atajos para comandos existentes o combinaciones sencillas de ellos. Para lÃ³gica mÃ¡s compleja, se suelen utilizar scripts o hooks.

ğŸ§  Pregunta 46
Â¿QuÃ© se puede lograr automatizar mediante la integraciÃ³n de Git con herramientas de IntegraciÃ³n Continua (CI/CD)?

A. La creaciÃ³n automÃ¡tica de ramas de desarrollo.
B. La resoluciÃ³n automÃ¡tica de conflictos de merge.
C. La ejecuciÃ³n automÃ¡tica de pruebas, anÃ¡lisis de cÃ³digo y despliegues.
D. La documentaciÃ³n automÃ¡tica del historial de commits.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La integraciÃ³n con CI/CD permite automatizar procesos clave del desarrollo de software, como la verificaciÃ³n de la calidad del cÃ³digo y el despliegue continuo.

ğŸ§  Pregunta 47
En el script de configuraciÃ³n automatizada, Â¿quÃ© hace el comando cp -r "$HOOKS_DIR"/* "$REPO_HOOKS_DIR"?

A. Comprime los archivos de hooks para ahorrar espacio.
B. Copia recursivamente todos los archivos del directorio de hooks centralizado al directorio de hooks del repositorio actual.
C. Crea un backup de los hooks existentes antes de modificarlos.
D. Ejecuta todos los scripts de hooks en el directorio centralizado.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Este comando copia todos los archivos y subdirectorios (-r) desde el directorio de hooks corporativo ($HOOKS_DIR) al directorio .git/hooks del repositorio local.

ğŸ§  Pregunta 48
Â¿Por quÃ© es importante respaldar la configuraciÃ³n de Git antes de realizar cambios significativos?

A. Para evitar la pÃ©rdida de credenciales de acceso a repositorios remotos.
B. Para poder revertir fÃ¡cilmente a una configuraciÃ³n anterior en caso de problemas.
C. Para mejorar el rendimiento de los comandos de Git.
D. Para asegurar la compatibilidad con otros sistemas de control de versiones.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Realizar un respaldo permite restaurar la configuraciÃ³n a un estado funcional previo si los nuevos cambios introducen problemas o no son deseados.

ğŸ§  Pregunta 49
Â¿CuÃ¡l es la diferencia fundamental entre un alias simple y un alias compuesto en Git?

A. Los alias simples solo abrevian un comando, mientras que los compuestos pueden ejecutar mÃºltiples comandos secuencialmente o utilizar funciones del shell.
B. Los alias simples se definen globalmente y los compuestos a nivel de repositorio.
C. Los alias compuestos requieren permisos de administrador para ser definidos.
D. No hay una diferencia funcional significativa entre ellos.

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Los alias simples son directos, mientras que los compuestos (que comienzan con !) permiten ejecutar comandos del shell, incluyendo mÃºltiples comandos de Git o lÃ³gica mÃ¡s compleja.

ğŸ§  Pregunta 50
Â¿QuÃ© ventaja ofrece la estandarizaciÃ³n de la configuraciÃ³n de Git en un equipo de desarrollo?

A. Reduce la curva de aprendizaje para nuevos miembros del equipo.
B. Asegura la consistencia en el flujo de trabajo y la aplicaciÃ³n de polÃ­ticas (como hooks).
C. Mejora la velocidad de ejecuciÃ³n de los comandos de Git.
D. Permite a cada desarrollador tener una configuraciÃ³n completamente personalizada sin conflictos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La estandarizaciÃ³n de la configuraciÃ³n ayuda a garantizar que todos los miembros del equipo trabajen con las mismas herramientas y polÃ­ticas, promoviendo la consistencia y reduciendo errores.