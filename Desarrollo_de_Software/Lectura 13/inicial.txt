ğŸ§  Pregunta 1
Â¿QuÃ© funciÃ³n cumple el hook pre-commit en Git?

A. Ejecuta scripts despuÃ©s de hacer un push
B. Valida o modifica el mensaje del commit
C. Revisa el cÃ³digo antes de realizar un commit
D. Notifica a los usuarios al recibir un pull

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-commit permite realizar tareas previas a un commit, como validaciÃ³n de sintaxis o pruebas automÃ¡ticas, y puede cancelar el commit si no se cumplen ciertos criterios.

ğŸ§  Pregunta 2
Â¿QuÃ© ventaja ofrece BFG Repo-Cleaner frente a git filter-branch?

A. Es mÃ¡s complejo pero mÃ¡s personalizable
B. Permite crear mÃºltiples ramas automÃ¡ticamente
C. Es mÃ¡s rÃ¡pido y fÃ¡cil de usar en casos comunes
D. Requiere menos memoria para clonar repositorios

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: BFG Repo-Cleaner estÃ¡ optimizado para tareas frecuentes como eliminar archivos grandes o sensibles, ofreciendo una interfaz mÃ¡s amigable y un rendimiento superior.

ğŸ§  Pregunta 3
Â¿DÃ³nde se ubican los hooks en un repositorio Git?

A. En la raÃ­z del sistema operativo
B. En la carpeta .git/hooks
C. En el archivo .gitconfig
D. En la carpeta src/hooks

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks se almacenan en la carpeta .git/hooks del repositorio y allÃ­ se pueden configurar scripts para ser ejecutados en eventos especÃ­ficos.

ğŸ§  Pregunta 4
Â¿QuÃ© ocurre si un hook commit-msg detecta que el mensaje es demasiado corto?

A. El commit se realiza pero se advierte al usuario
B. Se cancela el commit hasta corregir el mensaje
C. Se convierte automÃ¡ticamente a un mensaje largo
D. Se omite el mensaje y se genera uno por defecto

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook commit-msg puede interrumpir el proceso de commit si el mensaje no cumple con ciertas reglas, como la longitud mÃ­nima, para fomentar buenas prÃ¡cticas.

ğŸ§  Pregunta 5
Â¿CuÃ¡l es una ventaja de usar git worktree?

A. Duplica el repositorio en una nueva mÃ¡quina virtual
B. Permite trabajar con mÃºltiples ramas en directorios separados
C. Aumenta el tamaÃ±o del repositorio para incluir mÃ¡s commits
D. Elimina la necesidad de usar ramas

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: git worktree permite crear mÃºltiples Ã¡reas de trabajo vinculadas a diferentes ramas, lo que facilita trabajar en paralelo sin tener que hacer mÃºltiples clones.

ğŸ§  Pregunta 6
Â¿QuÃ© hace el comando git worktree list?

A. Muestra las diferencias entre dos ramas
B. Enumera todos los hooks activos del repositorio
C. Elimina los worktrees no utilizados
D. Muestra las rutas y ramas de los worktrees activos

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: git worktree list ofrece un resumen de todos los directorios de trabajo asociados, incluyendo la ruta y la rama activa en cada uno.

ğŸ§  Pregunta 7
Â¿QuÃ© hace el comando git filter-branch --index-filter?

A. Crea una rama basada en un Ã­ndice de commits
B. Elimina archivos directamente del historial del Ã­ndice
C. Convierte archivos en ramas temporales
D. Mejora el rendimiento de los filtros de log

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El uso de --index-filter en git filter-branch permite ejecutar comandos sobre el Ã­ndice de cada commit, Ãºtil para eliminar archivos sensibles del historial.

ğŸ§  Pregunta 8
Â¿CuÃ¡l es una desventaja de reescribir la historia de Git?

A. Incrementa el tamaÃ±o del repositorio
B. Crea mÃºltiples ramas automÃ¡ticamente
C. Puede romper la sincronizaciÃ³n con otros repositorios
D. Hace imposible agregar nuevos commits

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al cambiar los identificadores de los commits (hashes), se puede perder la sincronizaciÃ³n con repositorios remotos, lo que genera conflictos si no se comunica adecuadamente.

ğŸ§  Pregunta 9
Â¿Para quÃ© se puede usar un alias como lg = log --oneline --graph --decorate --all?

A. Para crear ramas
B. Para hacer merge automÃ¡tico
C. Para visualizar el historial en forma grÃ¡fica
D. Para eliminar ramas antiguas

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Este alias permite ver el historial de Git de forma resumida y grÃ¡fica, con decoraciÃ³n de ramas y etiquetas, facilitando el anÃ¡lisis visual del repositorio.

ğŸ§  Pregunta 10
Â¿QuÃ© permite lograr un hook pre-push que ejecuta pruebas unitarias?

A. Automatizar el pull en cada cambio
B. Ejecutar tests luego del push
C. Evitar que cÃ³digo defectuoso llegue al repositorio remoto
D. Desplegar automÃ¡ticamente el repositorio

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-push puede abortar el envÃ­o de cambios si las pruebas unitarias fallan, protegiendo asÃ­ la estabilidad del repositorio remoto.

ğŸ§  Pregunta 11
Â¿CuÃ¡l es el propÃ³sito principal de los hooks del lado del servidor en Git?

A. Realizar cambios en el sistema operativo
B. Automatizar el despliegue de versiones locales
C. Validar reglas antes de aceptar cambios remotos
D. Cambiar la configuraciÃ³n global del repositorio

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los hooks del lado del servidor permiten validar reglas, aplicar polÃ­ticas o activar sistemas de integraciÃ³n continua antes de aceptar pushes en repositorios remotos.

ğŸ§  Pregunta 12
Â¿QuÃ© hook se ejecuta justo despuÃ©s de que se completa un commit?

A. commit-msg
B. post-commit
C. pre-commit
D. post-push

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El post-commit se ejecuta justo despuÃ©s de que el commit se ha creado. Puede utilizarse para notificaciones, mÃ©tricas o procesos de registro.

ğŸ§  Pregunta 13
Â¿QuÃ© comando permite eliminar definitivamente datos no deseados despuÃ©s de usar BFG?

A. git reset --hard
B. git log --all
C. git gc --prune=now --aggressive
D. git merge --squash

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: DespuÃ©s de usar BFG, se recomienda usar git gc --prune=now --aggressive para eliminar referencias antiguas y reducir el tamaÃ±o del repositorio.

ğŸ§  Pregunta 14
Â¿QuÃ© comando crea un nuevo worktree asociado a una rama?

A. git clone --worktree
B. git worktree add -b rama directorio
C. git init worktree
D. git create worktree

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El comando git worktree add -b nombre_rama ruta crea un nuevo directorio de trabajo con una rama especÃ­fica, permitiendo trabajar en paralelo.

ğŸ§  Pregunta 15
Â¿CuÃ¡l es una recomendaciÃ³n antes de eliminar un worktree?

A. Asegurarse de que no tenga cambios pendientes
B. Cambiar de rama en todos los worktrees
C. Eliminar el repositorio principal
D. Cerrar todos los editores de texto

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Es importante verificar que el worktree no tenga cambios no guardados, ya que al eliminarlo se perderÃ­a ese trabajo.

ğŸ§  Pregunta 16
Â¿QuÃ© tipo de tareas se suelen automatizar con scripts de integraciÃ³n continua?

A. CreaciÃ³n de hooks locales
B. InstalaciÃ³n de sistemas operativos
C. EjecuciÃ³n de pruebas, despliegues y anÃ¡lisis de cÃ³digo
D. GeneraciÃ³n de contraseÃ±as seguras

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La integraciÃ³n continua automatiza tareas crÃ­ticas como pruebas automÃ¡ticas, anÃ¡lisis estÃ¡tico de cÃ³digo y despliegues, asegurando calidad y velocidad.

ğŸ§  Pregunta 17
Â¿CuÃ¡l es un riesgo asociado al uso de git filter-branch?

A. Aumenta la cantidad de ramas del repositorio
B. Reduce el nÃºmero de commits
C. Rompe la sincronizaciÃ³n con repositorios remotos
D. No permite eliminar archivos

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al modificar los hashes de los commits, git filter-branch puede provocar conflictos con repositorios remotos si no se maneja con precauciÃ³n.

ğŸ§  Pregunta 18
Â¿QuÃ© se necesita para que un hook pueda ejecutarse correctamente?

A. Estar en la rama main
B. Tener permisos de ejecuciÃ³n
C. Haber sido firmado con GPG
D. Tener extensiÃ³n .hook

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks deben tener permisos de ejecuciÃ³n (chmod +x) para que Git los pueda ejecutar automÃ¡ticamente.

ğŸ§  Pregunta 19
Â¿CuÃ¡l de las siguientes tareas no se puede automatizar directamente con un hook?

A. VerificaciÃ³n del mensaje de commit
B. EliminaciÃ³n de ramas remotas
C. ValidaciÃ³n de sintaxis del cÃ³digo
D. EjecuciÃ³n de pruebas antes de un push

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks actÃºan sobre acciones del flujo de trabajo como commit, push o merge, pero no realizan operaciones administrativas como eliminar ramas remotas.

ğŸ§  Pregunta 20
Â¿CuÃ¡l es una ventaja de los alias de Git?

A. Permiten escribir scripts en JavaScript
B. Facilitan la creaciÃ³n de mÃºltiples repositorios
C. Aceleran el acceso a comandos usados frecuentemente
D. Automatizan el cambio de nombre de archivos

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias permiten abreviar comandos repetitivos o compuestos, lo que ahorra tiempo y reduce errores al trabajar con Git.

ğŸ§  Pregunta 21
Â¿QuÃ© tipo de alias permite encadenar varios comandos Git?

A. Alias locales
B. Alias de sistema
C. Alias compuestos
D. Alias directos

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias compuestos se definen usando !f() { ... }; f y permiten ejecutar mÃºltiples comandos en secuencia como si fuera uno solo.

ğŸ§  Pregunta 22
Â¿DÃ³nde se configuran los alias globales de Git?

A. En .bashrc
B. En .git/hooks
C. En ~/.gitconfig
D. En el archivo README.md

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias globales de Git se definen en el archivo ~/.gitconfig, y estÃ¡n disponibles para todos los repositorios del usuario.

ğŸ§  Pregunta 23
Â¿QuÃ© hace el alias unstage = reset HEAD --?

A. Elimina archivos del disco
B. Borra commits anteriores
C. Saca archivos del Ã¡rea de staging
D. Revierte el repositorio a un estado anterior

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El alias unstage revierte la acciÃ³n de git add, eliminando los archivos del Ã¡rea de staging sin borrar su contenido.

ğŸ§  Pregunta 24
Â¿En quÃ© caso es ideal utilizar git worktree en lugar de hacer mÃºltiples clones?

A. Cuando se necesita acceder a mÃºltiples commits antiguos
B. Cuando se quiere usar diferentes versiones de Git
C. Cuando se desea trabajar en varias ramas simultÃ¡neamente
D. Cuando se necesita hacer backups

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git worktree permite trabajar en diferentes ramas en paralelo sin duplicar el repositorio completo.

ğŸ§  Pregunta 25
Â¿QuÃ© herramienta alternativa a git filter-branch se recomienda para tareas comunes de limpieza?

A. Git Sweeper
B. Repo-Tracker
C. BFG Repo-Cleaner
D. Git Analyzer

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: BFG Repo-Cleaner es una herramienta moderna y eficiente para eliminar archivos grandes o sensibles de la historia de Git.

ğŸ§  Pregunta 26
Â¿QuÃ© tipo de hook se recomienda para ejecutar pruebas antes de realizar un push?

A. pre-merge
B. commit-msg
C. pre-push
D. pre-commit

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-push permite validar el cÃ³digo (por ejemplo, ejecutar tests) antes de que sea enviado al repositorio remoto.

ğŸ§  Pregunta 27
Â¿QuÃ© beneficio aporta la configuraciÃ³n autocrlf = input en Git?

A. Establece el comportamiento por defecto del editor
B. Controla los finales de lÃ­nea en distintos sistemas operativos
C. Automatiza el despliegue continuo
D. Cambia el color del log de commits

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: autocrlf = input asegura que los finales de lÃ­nea se manejen correctamente entre sistemas Windows y Unix, previniendo errores por diferencias de formato.

ğŸ§  Pregunta 28
Â¿QuÃ© hook puede impedir el uso de mensajes como "fix" o "update" sin contexto?

A. post-commit
B. pre-push
C. commit-msg
D. pre-rebase

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook commit-msg puede validar el mensaje del commit y rechazar aquellos que no cumplan con reglas de formato o contenido.

ğŸ§  Pregunta 29
Â¿CuÃ¡l es el beneficio de usar chmod +x en scripts de hook?

A. Permite que el sistema los reconozca como ejecutables
B. Convierte el script en un archivo de configuraciÃ³n
C. Mejora la velocidad del hook
D. Activa el uso de variables de entorno

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: chmod +x asigna permisos de ejecuciÃ³n al archivo, lo cual es obligatorio para que Git pueda ejecutarlo automÃ¡ticamente como hook.

ğŸ§  Pregunta 30
Â¿QuÃ© acciÃ³n realiza el hook pre-commit en el ejemplo con archivos .py?

A. Ejecuta pruebas unitarias con Pytest
B. Reemplaza el contenido de los archivos
C. Valida sintaxis de archivos Python y bloquea el commit si hay errores
D. Compara cambios con el repositorio remoto

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook recorre archivos .py en staging, los compila para verificar errores de sintaxis y cancela el commit si alguno falla.

ğŸ§  Pregunta 31
Â¿QuÃ© evento activa el hook commit-msg?

A. Justo antes de ejecutar git push
B. Durante la escritura del mensaje de commit
C. Inmediatamente despuÃ©s de aplicar git add
D. Al hacer merge entre ramas

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook commit-msg se ejecuta justo despuÃ©s de escribir el mensaje del commit, permitiendo validarlo antes de que se registre el commit en el historial.

ğŸ§  Pregunta 32
Â¿QuÃ© comando elimina todos los commits vacÃ­os tras usar git filter-branch?

A. git gc
B. git prune
C. --prune-empty
D. --remove-history

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n --prune-empty elimina los commits que quedan vacÃ­os luego de aplicar filtros, como la eliminaciÃ³n de archivos del historial.

ğŸ§  Pregunta 33
Â¿Para quÃ© se usa el hook pre-rebase?

A. Validar conflictos durante un merge
B. Bloquear el rebase si no se cumplen condiciones
C. Cambiar el nombre de ramas
D. Sincronizar automÃ¡ticamente con remoto

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook pre-rebase puede cancelar el proceso de rebase si se detectan condiciones no deseadas, como una rama bloqueada o mal formateada.

ğŸ§  Pregunta 34
Â¿CuÃ¡l es la forma correcta de eliminar un worktree que ya no se necesita?

A. git worktree delete
B. git worktree clean
C. git worktree remove
D. git remove worktree

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: git worktree remove desasocia un directorio de trabajo del repositorio, siempre que estÃ© limpio (sin cambios pendientes).

ğŸ§  Pregunta 35
Â¿En quÃ© casos es inseguro reescribir la historia de un repositorio?

A. Cuando se usa git commit --amend
B. Cuando ya se ha compartido la historia con otros colaboradores
C. Siempre que se use una herramienta de terceros
D. Si el repositorio contiene ramas vacÃ­as

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Reescribir la historia despuÃ©s de que otros usuarios hayan basado su trabajo en ella puede generar conflictos y pÃ©rdida de sincronizaciÃ³n.

ğŸ§  Pregunta 36
Â¿QuÃ© ocurre si se ejecuta un script pre-push y falla?

A. El push se detiene
B. El repositorio remoto se borra
C. El hook se desactiva automÃ¡ticamente
D. Se crea una nueva rama con los cambios

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Si el hook pre-push retorna un cÃ³digo de error, Git cancela el envÃ­o de cambios al repositorio remoto.

ğŸ§  Pregunta 37
Â¿QuÃ© tipo de hook serÃ­a mÃ¡s adecuado para ejecutar un anÃ¡lisis estÃ¡tico del cÃ³digo?

A. post-merge
B. post-commit
C. pre-commit
D. pre-push

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El hook pre-commit es ideal para validar calidad de cÃ³digo o ejecutar herramientas como linters antes de permitir el commit.

ğŸ§  Pregunta 38
Â¿QuÃ© hace el comando git config --global color.ui auto?

A. Cambia el color de fondo del terminal
B. Aplica una interfaz visual
C. Habilita colores para facilitar la lectura de comandos Git
D. Ejecuta los hooks en modo automÃ¡tico

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La configuraciÃ³n color.ui auto activa la coloraciÃ³n automÃ¡tica en la salida de los comandos de Git para mejorar la legibilidad.

ğŸ§  Pregunta 39
Â¿CuÃ¡l es el objetivo del script run_tests.sh en un hook pre-push?

A. Instalar dependencias
B. Compilar los archivos
C. Ejecutar pruebas antes de subir cambios
D. Actualizar el repositorio remoto

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: En el contexto de un pre-push, run_tests.sh se utiliza para ejecutar tests que aseguren la estabilidad del cÃ³digo antes de subirlo.

ğŸ§  Pregunta 40
Â¿QuÃ© caracterÃ­stica distingue a BFG Repo-Cleaner frente a git filter-branch?

A. Usa comandos Python
B. Puede editar archivos de texto
C. EstÃ¡ diseÃ±ado para tareas comunes de limpieza y es mÃ¡s veloz
D. No funciona en sistemas Windows

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: BFG Repo-Cleaner estÃ¡ optimizado para casos comunes como eliminar archivos grandes o sensibles y es considerablemente mÃ¡s rÃ¡pido que git filter-branch.

ğŸ§  Pregunta 41
Â¿QuÃ© significa que git worktree comparta la base de datos del repositorio?

A. Usa el mismo espacio en disco para los objetos
B. Solo permite ver los logs del repositorio principal
C. No se puede hacer commit desde un worktree
D. Todos los worktrees estÃ¡n conectados por red

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Los worktrees comparten .git/objects y .git/refs, lo que permite ahorrar espacio y mantener sincronizaciÃ³n entre ramas.

ğŸ§  Pregunta 42
Â¿CuÃ¡l es el propÃ³sito de un script de configuraciÃ³n automatizada de Git?

A. Crear un nuevo sistema operativo
B. Configurar alias y hooks corporativos de forma estandarizada
C. Generar claves SSH para todos los usuarios
D. Eliminar configuraciones previas del sistema

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los scripts de configuraciÃ³n permiten uniformizar el entorno Git en mÃºltiples mÃ¡quinas, incluyendo alias, editor, hooks, etc.

ğŸ§  Pregunta 43
Â¿QuÃ© sucede si un alias se define incorrectamente en ~/.gitconfig?

A. Git lo corrige automÃ¡ticamente
B. El alias queda inactivo pero no da error
C. Git puede lanzar un error al intentar usarlo
D. Se convierte en una funciÃ³n del sistema

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Un alias mal definido puede provocar errores al ejecutarse si no cumple con la sintaxis esperada por Git.

ğŸ§  Pregunta 44
Â¿QuÃ© herramienta puede evitar que una contraseÃ±a filtrada llegue a un repositorio remoto?

A. git stash
B. git tag
C. pre-commit hook
D. git merge

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Un pre-commit hook puede analizar los archivos en staging y detener el commit si detecta informaciÃ³n sensible.

ğŸ§  Pregunta 45
Â¿CuÃ¡l es una prÃ¡ctica segura antes de reescribir la historia de un repositorio?

A. Borrar todos los tags
B. Avisar al equipo y hacer backup
C. Reiniciar el sistema
D. Crear nuevos worktrees

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Como reescribir la historia puede afectar a otros colaboradores, siempre se debe comunicar, hacer backup y planificar el cambio.

ğŸ§  Pregunta 46
Â¿QuÃ© indica el comando git log --oneline --graph --decorate --all?

A. Borra todos los commits antiguos
B. Visualiza el historial en un formato compacto y visual
C. Elimina ramas locales
D. Cambia el mensaje de los commits

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Este comando muestra un log grÃ¡fico resumido, ideal para comprender la estructura del historial y la relaciÃ³n entre ramas.

ğŸ§  Pregunta 47
Â¿QuÃ© ganancia aporta la ejecuciÃ³n de pruebas automÃ¡ticas antes de cada push?

A. Mayor velocidad en merges
B. Mayor estabilidad en el cÃ³digo integrado
C. EliminaciÃ³n de ramas temporales
D. Aumento del tamaÃ±o del repositorio

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Ejecutar tests automÃ¡ticamente antes de subir cambios permite prevenir errores y asegurar que el cÃ³digo en remoto estÃ© siempre funcional.

ğŸ§  Pregunta 48
Â¿DÃ³nde se configuran las opciones como editor predeterminado o final de lÃ­nea en Git?

A. .gitignore
B. .githooks
C. .gitmodules
D. .gitconfig

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: El archivo .gitconfig permite definir configuraciones como editor predeterminado, alias, colores y tratamiento de finales de lÃ­nea.

ğŸ§  Pregunta 49
Â¿QuÃ© hace el comando git rm --cached dentro de un filtro?

A. Elimina archivos del disco duro
B. Quita archivos del staging sin borrarlos del disco
C. Borra archivos del historial en la reescritura
D. Reinicia todos los worktrees

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: En el contexto de git filter-branch, git rm --cached se usa para eliminar archivos del Ã­ndice (y por tanto del historial) sin afectar el archivo local.

ğŸ§  Pregunta 50
Â¿QuÃ© opciÃ³n de configuraciÃ³n de Git se puede usar para definir la herramienta grÃ¡fica de comparaciÃ³n?

A. [diff] tool = meld
B. [alias] compare = meld
C. [remote] visual = meld
D. [branch] gui = meld

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: En la secciÃ³n [diff], se puede especificar tool = meld u otra herramienta grÃ¡fica para visualizar las diferencias entre versiones.