ğŸ§  Pregunta 1
Â¿CuÃ¡l es la principal ventaja de integrar Git avanzado en entornos de desarrollo Ã¡gil que utilizan Desarrollo Guiado por el Comportamiento (BDD)?

A. Reduce la necesidad de pruebas unitarias.
B. Permite ignorar los criterios de aceptaciÃ³n definidos en Gherkin.
C. Asegura que cada cambio de cÃ³digo se valide mediante pruebas de aceptaciÃ³n automatizadas.
D. Dificulta la colaboraciÃ³n entre desarrolladores y stakeholders.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La integraciÃ³n de Git avanzado con BDD permite automatizar la validaciÃ³n de que el cÃ³digo cumple con los comportamientos especificados en los escenarios de Gherkin, mejorando la calidad del software.

ğŸ§  Pregunta 2
Â¿QuÃ© funciÃ³n cumplen los hooks de Git como pre-commit en la integraciÃ³n con BDD?

A. Permiten subir cambios al repositorio remoto sin validaciÃ³n.
B. Ejecutan scripts automÃ¡ticamente en momentos clave del ciclo de vida del repositorio, como validar pruebas BDD antes de un commit.
C. Se utilizan para modificar el historial de commits despuÃ©s de haber realizado un push.
D. Desactivan la necesidad de realizar pruebas locales por parte del desarrollador.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks como pre-commit automatizan tareas importantes, como la ejecuciÃ³n de pruebas BDD, antes de permitir un commit, asegurando que el cÃ³digo cumpla con los criterios de aceptaciÃ³n localmente.

ğŸ§  Pregunta 3
En un pipeline de IntegraciÃ³n Continua y Entrega Continua (CI/CD) integrado con BDD, Â¿cuÃ¡l es el propÃ³sito principal de ejecutar la suite de pruebas BDD?

A. Optimizar el tiempo de compilaciÃ³n del proyecto.
B. Asegurar que la infraestructura del servidor estÃ© correctamente configurada.
C. Validar que el comportamiento del sistema cumple con las especificaciones definidas en los escenarios de Gherkin.
D. Generar automÃ¡ticamente la documentaciÃ³n tÃ©cnica del proyecto.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La ejecuciÃ³n de las pruebas BDD en el pipeline de CI/CD garantiza que cada cambio en el cÃ³digo sea verificado contra los criterios de aceptaciÃ³n definidos por los stakeholders.

ğŸ§  Pregunta 4
Â¿Por quÃ© es beneficioso estandarizar el historial de commits en un proyecto que utiliza Git avanzado y BDD?

A. Reduce el tamaÃ±o del repositorio Git.
B. Facilita la compilaciÃ³n mÃ¡s rÃ¡pida del cÃ³digo.
C. Permite relacionar directamente los cambios del cÃ³digo con historias de usuario o escenarios de BDD, mejorando la trazabilidad.
D. Simplifica la estructura de las ramas de Git.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La estandarizaciÃ³n de los mensajes de commit facilita el seguimiento de quÃ© cambios responden a quÃ© requisitos definidos en las especificaciones BDD.

ğŸ§  Pregunta 5
Â¿CÃ³mo contribuyen los git worktrees a la gestiÃ³n paralela de funcionalidades en un entorno BDD?

A. Permiten fusionar ramas conflictivas de forma automÃ¡tica.
B. Facilitan el trabajo con mÃºltiples ramas del mismo repositorio en diferentes directorios, permitiendo el desarrollo aislado y la prueba de funcionalidades sin interferencias.
C. Reducen la necesidad de crear ramas para nuevas funcionalidades.
D. Mejoran el rendimiento del repositorio al trabajar en una sola rama a la vez.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los git worktrees aÃ­slan el trabajo en diferentes funcionalidades, lo que es especialmente Ãºtil para probar historias de usuario o escenarios BDD de forma independiente.

ğŸ§  Pregunta 6
Â¿QuÃ© utilidad tienen los alias de Git en la automatizaciÃ³n de tareas en un entorno BDD?

A. Permiten cambiar el autor de un commit ya realizado.
B. Simplifican la visualizaciÃ³n del historial de commits.
C. Permiten definir comandos personalizados que pueden encadenar acciones como hacer un commit, ejecutar pruebas BDD y realizar un push.
D. Se utilizan para gestionar las credenciales de acceso al repositorio remoto.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los alias de Git automatizan secuencias de comandos, lo que ayuda a asegurar que las pruebas BDD se ejecuten como parte del flujo de trabajo de desarrollo.

ğŸ§  Pregunta 7
Â¿CuÃ¡l es la importancia de las expresiones regulares en la definiciÃ³n de steps en Gherkin?

A. Permiten escribir escenarios en mÃºltiples idiomas.
B. Facilitan la creaciÃ³n de steps reutilizables que pueden capturar variables dinÃ¡micas de los escenarios.
C. Mejoran la legibilidad de los archivos de caracterÃ­sticas.
D. Reducen el tiempo de ejecuciÃ³n de las pruebas BDD.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las expresiones regulares en Gherkin permiten parametrizar los steps, haciÃ©ndolos mÃ¡s flexibles y reutilizables para diferentes escenarios.

ğŸ§  Pregunta 8
Dentro del Four Test Pattern integrado en un flujo BDD, Â¿quÃ© rol cumplen las pruebas de aceptaciÃ³n?

A. Validar las unidades mÃ¡s pequeÃ±as de cÃ³digo de forma aislada.
B. Verificar la interacciÃ³n entre distintos mÃ³dulos o servicios del sistema.
C. Asegurar que el software completo cumpla con los requisitos funcionales y no funcionales.
D. Confirmar que el software cumple con los criterios de aceptaciÃ³n definidos en las historias de usuario, a travÃ©s de los escenarios de Gherkin.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: Las pruebas de aceptaciÃ³n, derivadas de los escenarios BDD, son cruciales para asegurar que el software entregado satisfaga las necesidades del usuario final.

ğŸ§  Pregunta 9
Â¿QuÃ© sucede si un desarrollador intenta realizar un git commit y un hook pre-commit configurado para ejecutar pruebas BDD detecta un fallo?

A. El commit se realiza de todas formas, pero se genera una advertencia.
B. Git impide la realizaciÃ³n del commit hasta que las pruebas sean exitosas.
C. El commit se realiza, pero el pipeline de CI/CD se detiene.
D. Se revierte automÃ¡ticamente el Ãºltimo cambio realizado en los archivos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks pre-commit estÃ¡n diseÃ±ados para detener acciones si las validaciones configuradas (como la ejecuciÃ³n exitosa de pruebas BDD) no se cumplen.

ğŸ§  Pregunta 10
En el contexto de la integraciÃ³n de Git avanzado y BDD, Â¿cuÃ¡l es el beneficio de integrar la ejecuciÃ³n de pruebas BDD en los pipelines de CI/CD?

A. Permite desplegar el software mÃ¡s rÃ¡pidamente sin importar los fallos en las pruebas.
B. Asegura que cada cambio de cÃ³digo sea automÃ¡ticamente validado contra los criterios de aceptaciÃ³n antes de su integraciÃ³n.
C. Reduce la necesidad de realizar pruebas exploratorias por parte del equipo de QA.
D. Simplifica la configuraciÃ³n del entorno de desarrollo local para los nuevos miembros del equipo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La integraciÃ³n en CI/CD automatiza la validaciÃ³n de los requisitos en cada cambio, asegurando la calidad del software de forma continua.

ğŸ§  Pregunta 11
Â¿QuÃ© tipo de informaciÃ³n se podrÃ­a validar utilizando un hook commit-msg en un proyecto BDD?

A. El tamaÃ±o de los archivos que se estÃ¡n commiteando.
B. El tiempo que tardÃ³ el desarrollador en realizar los cambios.
C. El formato del mensaje del commit, por ejemplo, asegurando que incluya un identificador de historia de usuario.
D. La complejidad ciclomÃ¡tica del cÃ³digo que se estÃ¡ commiteando.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los hooks commit-msg se utilizan para asegurar la adherencia a convenciones en los mensajes de commit, lo que facilita la trazabilidad con las historias de usuario en BDD.

ğŸ§  Pregunta 12
Â¿CuÃ¡l es la principal utilidad de herramientas como git filter-branch o BFG Repo-Cleaner en un proyecto que sigue prÃ¡cticas de BDD?

A. Mejorar el rendimiento del repositorio Git al eliminar ramas antiguas.
B. Reorganizar la estructura de los directorios del proyecto.
C. Limpiar o reescribir el historial de Git para mantener la coherencia con las prÃ¡cticas de documentaciÃ³n y trazabilidad de los requisitos.
D. Automatizar la generaciÃ³n de informes de cobertura de pruebas.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Estas herramientas ayudan a mantener un historial limpio y alineado con las historias de usuario y escenarios BDD, facilitando la comprensiÃ³n de la evoluciÃ³n del proyecto.

ğŸ§  Pregunta 13
Â¿CÃ³mo facilita el uso de git worktrees la colaboraciÃ³n en un equipo que trabaja en mÃºltiples funcionalidades definidas por escenarios BDD?

A. Permite que varios desarrolladores editen el mismo archivo simultÃ¡neamente sin conflictos.
B. Facilita la creaciÃ³n de mÃºltiples copias completas del repositorio para cada desarrollador.
C. Permite trabajar en diferentes ramas en directorios separados, aislando el desarrollo de cada funcionalidad y sus pruebas BDD.
D. Automatiza la creaciÃ³n de ramas basadas en las historias de usuario de BDD.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los worktrees permiten un desarrollo paralelo y aislado, lo cual es ideal cuando diferentes miembros del equipo trabajan en distintas funcionalidades con sus propias pruebas de aceptaciÃ³n.

ğŸ§  Pregunta 14
Â¿QuÃ© tipo de tareas se pueden automatizar mediante scripts personalizados en un entorno de desarrollo BDD integrado con Git?

A. La creaciÃ³n automÃ¡tica de archivos de caracterÃ­sticas de Gherkin.
B. La generaciÃ³n de informes de resultados de las pruebas BDD en formatos especÃ­ficos.
C. La estandarizaciÃ³n de la configuraciÃ³n de Git, la instalaciÃ³n de hooks y la definiciÃ³n de alias Ãºtiles para el flujo de trabajo BDD.
D. La implementaciÃ³n automÃ¡tica de los steps definidos en los archivos de caracterÃ­sticas.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los scripts personalizados ayudan a asegurar un entorno de desarrollo consistente y a automatizar tareas repetitivas relacionadas con Git y la ejecuciÃ³n de pruebas BDD.

ğŸ§  Pregunta 15
Â¿De quÃ© manera el uso de expresiones regulares en los steps de Behave contribuye a la eficiencia de las pruebas BDD?

A. Permite escribir escenarios de prueba en un lenguaje mÃ¡s tÃ©cnico, reduciendo la ambigÃ¼edad.
B. Facilita la creaciÃ³n de steps mÃ¡s especÃ­ficos y menos reutilizables, enfocados en un solo caso.
C. Posibilita la creaciÃ³n de steps genÃ©ricos que pueden adaptarse a mÃºltiples escenarios al capturar diferentes valores dinÃ¡micamente.
D. Mejora la velocidad de ejecuciÃ³n de las pruebas al optimizar la bÃºsqueda de coincidencias en el cÃ³digo.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La capacidad de capturar variables con expresiones regulares hace que los steps sean mÃ¡s reutilizables, reduciendo la cantidad de cÃ³digo necesario para cubrir diferentes escenarios.

ğŸ§  Pregunta 16
En el contexto del Four Test Pattern, Â¿quÃ© diferencia principal existe entre las pruebas unitarias y las pruebas de aceptaciÃ³n (BDD)?

A. Las pruebas unitarias son escritas por los testers, mientras que las pruebas de aceptaciÃ³n son escritas por los desarrolladores.
B. Las pruebas unitarias validan el comportamiento del sistema desde la perspectiva del usuario final, mientras que las pruebas de aceptaciÃ³n se centran en componentes individuales.
C. Las pruebas unitarias se ejecutan en el entorno de producciÃ³n, mientras que las pruebas de aceptaciÃ³n se ejecutan en el entorno de desarrollo.
D. Las pruebas unitarias verifican el correcto funcionamiento de pequeÃ±as partes del cÃ³digo de forma aislada, mientras que las pruebas de aceptaciÃ³n validan que el sistema cumpla con los criterios definidos por el negocio.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: Las pruebas unitarias se enfocan en la lÃ³gica interna, mientras que las pruebas de aceptaciÃ³n (BDD) validan el cumplimiento de los requisitos del usuario.

ğŸ§  Pregunta 17
Â¿CÃ³mo se integra el Four Test Pattern con un flujo de trabajo BDD y Git avanzado en un pipeline de CI/CD?

A. Se ejecutan solo las pruebas de aceptaciÃ³n para validar los cambios antes de la integraciÃ³n.
B. Se ejecutan todos los niveles de pruebas (unitarias, integraciÃ³n, sistema y aceptaciÃ³n) en cada ciclo de integraciÃ³n para asegurar una validaciÃ³n exhaustiva del cÃ³digo.
C. Los desarrolladores deciden quÃ© tipo de pruebas ejecutar antes de cada commit.
D. Las pruebas se ejecutan de forma manual en un entorno separado despuÃ©s de la integraciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La integraciÃ³n completa implica la automatizaciÃ³n de la ejecuciÃ³n de todos los niveles de pruebas en el pipeline para garantizar la calidad en cada etapa del desarrollo.

ğŸ§  Pregunta 18
Â¿CuÃ¡l es el objetivo principal de mantener un historial de commits limpio y bien estructurado en un proyecto BDD?

A. Reducir el tamaÃ±o del repositorio Git para mejorar el rendimiento.
B. Facilitar la identificaciÃ³n de la causa de errores y la comprensiÃ³n de la evoluciÃ³n del software en relaciÃ³n con los requisitos definidos en los escenarios BDD.
C. Simplificar el proceso de merge entre diferentes ramas del repositorio.
D. Asegurar que todos los commits sean realizados por un solo desarrollador para evitar conflictos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un historial claro y bien organizado permite rastrear quÃ© cambios se realizaron para cumplir con quÃ© requisitos, facilitando el mantenimiento y la comprensiÃ³n del proyecto.

ğŸ§  Pregunta 19
Â¿QuÃ© ventaja principal ofrece la automatizaciÃ³n de pruebas de aceptaciÃ³n (BDD) mediante hooks de Git en un entorno de desarrollo colaborativo?

A. Permite a los desarrolladores saltarse la revisiÃ³n de cÃ³digo.
B. Reduce significativamente la posibilidad de integrar cÃ³digo que no cumple con los criterios de aceptaciÃ³n en el repositorio remoto.
C. Acelera el proceso de despliegue a producciÃ³n al omitir pruebas manuales.
D. Simplifica la gestiÃ³n de mÃºltiples ramas de desarrollo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La validaciÃ³n automÃ¡tica en cada commit o push ayuda a mantener la calidad del cÃ³digo base al asegurar que los cambios cumplen con los requisitos definidos.

ğŸ§  Pregunta 20
Â¿CÃ³mo influye la integraciÃ³n de Git avanzado con BDD en la documentaciÃ³n del proyecto?

A. Genera automÃ¡ticamente diagramas de la arquitectura del software.
B. Mantiene la documentaciÃ³n tÃ©cnica separada del cÃ³digo fuente.
C. Los escenarios de BDD en Gherkin actÃºan como documentaciÃ³n viva y ejecutable de los requisitos del sistema.
D. Reduce la necesidad de escribir documentaciÃ³n formal del usuario.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los escenarios de BDD, al ser especificaciones ejecutables, se convierten en una forma de documentaciÃ³n siempre actualizada y verificable.

ğŸ§  Pregunta 21
Â¿QuÃ© implicaciÃ³n tiene el uso de un hook pre-push que ejecuta pruebas BDD para la estabilidad del repositorio remoto?

A. Permite a los desarrolladores forzar la subida de cÃ³digo incluso si las pruebas fallan localmente.
B. Asegura que solo se envÃ­en al repositorio central cambios que hayan superado las pruebas de aceptaciÃ³n, manteniendo la integridad de la rama principal.
C. Ralentiza el proceso de envÃ­o de cambios al servidor remoto.
D. Obliga a todos los desarrolladores a utilizar el mismo entorno de desarrollo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Al validar los cambios antes de ser compartidos, se minimiza el riesgo de introducir cÃ³digo defectuoso en el repositorio central.

ğŸ§  Pregunta 22
Â¿De quÃ© manera la estandarizaciÃ³n de los mensajes de commit puede facilitar la colaboraciÃ³n entre el equipo de desarrollo y los stakeholders en un proyecto BDD?

A. Permite a los stakeholders escribir directamente en el historial de commits.
B. Facilita la generaciÃ³n automÃ¡tica de informes de progreso basados en las funcionalidades implementadas.
C. Ayuda a vincular los cambios tÃ©cnicos con las historias de usuario y los escenarios de aceptaciÃ³n que los originaron, mejorando la comprensiÃ³n del valor entregado.
D. Reduce la necesidad de reuniones de seguimiento del proyecto.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Un historial de commits claro y vinculado a los requisitos facilita la comunicaciÃ³n y el entendimiento del avance del proyecto por parte de todos los involucrados.

ğŸ§  Pregunta 23
Â¿CuÃ¡l es una ventaja de utilizar git worktrees en un proyecto donde diferentes funcionalidades impactan en gran medida la misma Ã¡rea del cÃ³digo?

A. Permite combinar los cambios de diferentes funcionalidades automÃ¡ticamente sin conflictos.
B. Facilita el desarrollo aislado de cada funcionalidad en su propio espacio de trabajo, evitando interferencias y simplificando las pruebas.
C. Reduce el tamaÃ±o del repositorio al no tener mÃºltiples copias de las ramas.
D. Acelera la conmutaciÃ³n entre diferentes ramas al mantener solo una copia del repositorio.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El aislamiento proporcionado por los worktrees minimiza los riesgos de conflictos y facilita la prueba individual de cada funcionalidad.

ğŸ§  Pregunta 24
Â¿CÃ³mo pueden los alias de Git personalizados contribuir a la adopciÃ³n de buenas prÃ¡cticas de BDD dentro de un equipo?

A. Pueden configurarse para evitar que los desarrolladores escriban escenarios de Gherkin incorrectamente.
B. Pueden simplificar la ejecuciÃ³n de comandos que integran acciones de Git con la ejecuciÃ³n de pruebas BDD, fomentando su uso regular.
C. Pueden generar automÃ¡ticamente informes detallados del cumplimiento de los criterios de aceptaciÃ³n.
D. Pueden forzar a los desarrolladores a realizar commits con mayor frecuencia.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los alias que combinan comandos de Git con la ejecuciÃ³n de pruebas BDD hacen que el proceso de validaciÃ³n sea mÃ¡s sencillo y fluido para los desarrolladores.

ğŸ§  Pregunta 25
Â¿Por quÃ© es importante la capacidad de las expresiones regulares en Gherkin para la creaciÃ³n de steps reutilizables?

A. Reduce la necesidad de que los analistas de negocio participen en la definiciÃ³n de los escenarios.
B. Permite que un mismo step de Behave se utilice para diferentes escenarios con datos variables, disminuyendo la redundancia en el cÃ³digo de prueba.
C. Mejora la velocidad de ejecuciÃ³n de las pruebas al simplificar la lÃ³gica de los steps.
D. Facilita la traducciÃ³n de los escenarios de Gherkin a diferentes lenguajes de programaciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La reutilizaciÃ³n de steps a travÃ©s de expresiones regulares hace que la suite de pruebas sea mÃ¡s mantenible y eficiente.

ğŸ§  Pregunta 26
En el contexto del Four Test Pattern, Â¿quÃ© tipo de problemas se busca identificar principalmente con las pruebas de integraciÃ³n?

A. Errores en la lÃ³gica interna de funciones o mÃ©todos individuales.
B. Problemas que surgen de la interacciÃ³n entre diferentes mÃ³dulos o servicios del sistema.
C. Fallos en el cumplimiento de los requisitos del usuario final.
D. Problemas de rendimiento y escalabilidad del sistema en condiciones de carga.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las pruebas de integraciÃ³n se centran en asegurar que los diferentes componentes del sistema trabajen juntos correctamente.

ğŸ§  Pregunta 27
Â¿CÃ³mo contribuye la ejecuciÃ³n automatizada de todos los niveles del Four Test Pattern en un pipeline de CI/CD a la calidad del software en un proyecto BDD?

A. Asegura que el software se despliegue mÃ¡s rÃ¡pidamente al automatizar todas las pruebas.
B. Proporciona una validaciÃ³n exhaustiva del software en diferentes niveles (unidad, integraciÃ³n, sistema y aceptaciÃ³n), detectando errores en etapas tempranas del ciclo de desarrollo.
C. Elimina la necesidad de realizar pruebas exploratorias por parte del equipo de QA.
D. Simplifica la configuraciÃ³n del entorno de pruebas.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Una estrategia de pruebas multinivel y automatizada garantiza una alta calidad al verificar el software desde sus componentes mÃ¡s pequeÃ±os hasta su comportamiento global.

ğŸ§  Pregunta 28
Â¿QuÃ© implicaciÃ³n tiene para la trazabilidad de requisitos el mantener un historial de commits que sigue convenciones claras en un proyecto BDD?

A. Facilita la anonimizaciÃ³n de los contribuyentes al proyecto.
B. Permite rastrear quÃ© cambios en el cÃ³digo se realizaron para cumplir con quÃ© historias de usuario y escenarios de aceptaciÃ³n.
C. Simplifica la reescritura del historial de commits en caso de errores.
D. Asegura que todos los desarrolladores sigan el mismo estilo de codificaciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La trazabilidad es fundamental para entender la relaciÃ³n entre el cÃ³digo y los requisitos del negocio, lo cual se facilita con un historial de commits bien organizado.

ğŸ§  Pregunta 29
Â¿CuÃ¡l es el riesgo de no utilizar hooks de Git para validar los criterios de aceptaciÃ³n definidos en BDD antes de integrar cambios al repositorio?

A. Aumenta la velocidad de desarrollo al evitar la necesidad de ejecutar pruebas localmente.
B. Incrementa la probabilidad de introducir en el cÃ³digo base funcionalidades que no cumplen con los requisitos del negocio.
C. Reduce la complejidad del pipeline de CI/CD.
D. Simplifica la gestiÃ³n de las ramas de Git.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Sin la validaciÃ³n temprana, es mÃ¡s probable que se integre cÃ³digo que no satisface las expectativas del usuario, lo que puede generar problemas posteriores.

ğŸ§  Pregunta 30
Â¿De quÃ© manera la prÃ¡ctica de BDD influye en la comunicaciÃ³n entre los miembros tÃ©cnicos y no tÃ©cnicos del equipo de desarrollo?

A. Requiere que los miembros no tÃ©cnicos aprendan lenguajes de programaciÃ³n.
B. Fomenta el uso de un lenguaje comÃºn (Gherkin) para describir el comportamiento esperado del sistema, facilitando la comprensiÃ³n y la colaboraciÃ³n entre todos.
C. Reduce la necesidad de documentaciÃ³n formal al confiar en el conocimiento tÃ¡cito del equipo.
D. Limita la participaciÃ³n de los stakeholders a la definiciÃ³n inicial de los requisitos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El lenguaje natural de Gherkin permite que personas con diferentes roles comprendan y discutan los requisitos del sistema de manera efectiva.

ğŸ§  Pregunta 31
Â¿CÃ³mo puede la reescritura del historial de Git ser Ãºtil en un proyecto BDD en relaciÃ³n con la gestiÃ³n de requisitos?

A. Permite eliminar del historial commits que introdujeron funcionalidades que finalmente no se implementaron o que no cumplieron con los criterios de aceptaciÃ³n.
B. Facilita la fusiÃ³n de mÃºltiples historias de usuario en un solo commit para simplificar el historial.
C. Permite cambiar el autor de commits para reflejar mejor quiÃ©n definiÃ³ los requisitos.
D. Automatiza la generaciÃ³n de los archivos de caracterÃ­sticas de Gherkin a partir del historial de commits.

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Mantener un historial limpio y relevante ayuda a comprender la evoluciÃ³n de las funcionalidades que realmente se entregaron y cumplen con los requisitos.

ğŸ§  Pregunta 32
Â¿QuÃ© escenario podrÃ­a beneficiarse especialmente del uso de git worktrees en un equipo que sigue un flujo de trabajo BDD?

A. Cuando un desarrollador necesita revisar el cÃ³digo de otro miembro del equipo sin interrumpir su propio trabajo.
B. Cuando varios desarrolladores necesitan trabajar simultÃ¡neamente en la misma historia de usuario con diferentes escenarios BDD.
C. Cuando un desarrollador necesita trabajar en una nueva funcionalidad mientras mantiene una rama estable para realizar correcciones urgentes.
D. Cuando el equipo necesita fusionar varias ramas de funcionalidades completadas en la rama principal.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los worktrees permiten manejar el desarrollo de nuevas funcionalidades y el mantenimiento de versiones estables de forma concurrente y aislada.

ğŸ§  Pregunta 33
Â¿CÃ³mo puede un script personalizado de Git ayudar a asegurar la correcta ejecuciÃ³n de las pruebas BDD antes de un push al repositorio remoto?

A. Puede modificar el cÃ³digo fuente automÃ¡ticamente para corregir fallos en las pruebas.
B. Puede configurarse para ejecutar la suite de pruebas de Behave y abortar el push si alguna prueba falla.
C. Puede generar un informe detallado de la cobertura de pruebas despuÃ©s de cada push.
D. Puede notificar automÃ¡ticamente a los stakeholders si las pruebas BDD fallan.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Automatizar la ejecuciÃ³n de pruebas antes de compartir el cÃ³digo ayuda a mantener la calidad del repositorio central.

ğŸ§  Pregunta 34
Â¿CuÃ¡l es la ventaja de utilizar expresiones regulares en los steps de Behave al interactuar con elementos de la interfaz de usuario?

A. Permite escribir steps en un lenguaje mÃ¡s tÃ©cnico, lo que facilita la automatizaciÃ³n.
B. Facilita la localizaciÃ³n de elementos dinÃ¡micos en la interfaz que pueden variar entre diferentes escenarios o entornos.
C. Mejora el rendimiento de la automatizaciÃ³n al hacer que los selectores sean mÃ¡s especÃ­ficos.
D. Reduce la necesidad de utilizar frameworks de automatizaciÃ³n de interfaz de usuario.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las expresiones regulares permiten crear selectores flexibles que pueden adaptarse a elementos dinÃ¡micos, haciendo los tests mÃ¡s robustos.

ğŸ§  Pregunta 35
En el contexto del Four Test Pattern, Â¿quÃ© tipo de feedback se obtiene principalmente de las pruebas de aceptaciÃ³n (BDD)?

A. Feedback sobre la eficiencia y el rendimiento del cÃ³digo.
B. Feedback tÃ©cnico detallado sobre posibles errores de implementaciÃ³n.
C. Feedback sobre si el software cumple con las expectativas y necesidades del usuario final.
D. Feedback sobre la cobertura del cÃ³digo por las pruebas unitarias.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las pruebas de aceptaciÃ³n estÃ¡n centradas en validar el valor entregado al usuario desde una perspectiva funcional.

ğŸ§  Pregunta 36
Â¿CÃ³mo se alinea el principio de "documentaciÃ³n viva" en BDD con la gestiÃ³n del historial en Git avanzado?

A. El historial de Git se convierte automÃ¡ticamente en la documentaciÃ³n del proyecto.
B. Las convenciones en los mensajes de commit pueden ayudar a trazar la evoluciÃ³n de las funcionalidades definidas en los escenarios BDD, complementando la documentaciÃ³n viva.
C. La necesidad de documentaciÃ³n formal se elimina por completo gracias al historial de Git.
D. El historial de Git se utiliza para almacenar los archivos de caracterÃ­sticas de Gherkin.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un historial de commits bien estructurado puede proporcionar contexto sobre por quÃ© se realizaron ciertos cambios en relaciÃ³n con los requisitos documentados en los escenarios BDD.

ğŸ§  Pregunta 37
Â¿QuÃ© desafÃ­o podrÃ­a surgir al no integrar adecuadamente Git avanzado con las prÃ¡cticas de BDD en un equipo de desarrollo Ã¡gil?

A. Dificultad para realizar despliegues continuos debido a la falta de control de versiones.
B. Riesgo de que el software entregado no cumpla con las expectativas del usuario debido a una validaciÃ³n inadecuada de los requisitos.
C. Lentitud en la implementaciÃ³n de nuevas funcionalidades debido a la complejidad de Git.
D. Problemas de comunicaciÃ³n entre los desarrolladores debido a la falta de un lenguaje comÃºn.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Una integraciÃ³n deficiente puede llevar a una desconexiÃ³n entre lo que se desarrolla y lo que realmente se necesita, resultando en un producto de menor valor.

ğŸ§  Pregunta 38
Â¿CÃ³mo puede el uso de alias de Git que incluyan la ejecuciÃ³n de pruebas BDD impactar en la mentalidad del equipo de desarrollo?

A. Puede fomentar una mayor disciplina y conciencia sobre la importancia de validar el cÃ³digo contra los criterios de aceptaciÃ³n antes de compartirlo.
B. Puede generar resistencia al flujo de trabajo al aÃ±adir pasos adicionales al proceso de commit y push.
C. Puede llevar a una menor participaciÃ³n de los testers en el ciclo de desarrollo.
D. Puede hacer que los desarrolladores dependan demasiado de la automatizaciÃ³n y descuiden las pruebas manuales.

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: La automatizaciÃ³n de las pruebas como parte de las acciones comunes de Git refuerza la cultura de calidad y la responsabilidad individual sobre el cumplimiento de los requisitos.

ğŸ§  Pregunta 39
Â¿QuÃ© consideraciÃ³n importante se debe tener al utilizar git filter-branch o BFG Repo-Cleaner en un repositorio compartido por varios desarrolladores en un proyecto BDD?

A. Estas herramientas no deben utilizarse en repositorios compartidos para evitar la pÃ©rdida de datos.
B. Es crucial comunicar al equipo las acciones de reescritura del historial y coordinar la recuperaciÃ³n de los cambios para evitar problemas de sincronizaciÃ³n.
C. Es recomendable realizar estas operaciones solo en ramas locales y fusionarlas cuidadosamente.
D. Estas herramientas solo deben ser utilizadas por el lÃ­der tÃ©cnico del proyecto.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La reescritura del historial en repositorios compartidos puede causar problemas si no se gestiona y comunica adecuadamente al equipo.

ğŸ§  Pregunta 40
En un flujo de trabajo integrado de Git avanzado y BDD, Â¿cuÃ¡l es el resultado esperado de una ejecuciÃ³n exitosa de las pruebas de aceptaciÃ³n en el pipeline de CI/CD?

A. Se genera automÃ¡ticamente la siguiente versiÃ³n del software para su despliegue.
B. Se envÃ­a una notificaciÃ³n al equipo de desarrollo indicando que el cÃ³digo cumple con los criterios de aceptaciÃ³n definidos.
C. Se habilita la fusiÃ³n automÃ¡tica de la rama actual con la rama principal.
D. Se confirma que el comportamiento del sistema coincide con las especificaciones acordadas con los stakeholders, lo que aumenta la confianza en la calidad del software.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: El Ã©xito de las pruebas de aceptaciÃ³n es una seÃ±al clave de que el software estÃ¡ funcionando segÃºn lo esperado desde la perspectiva del negocio.

ğŸ§  Pregunta 41
Â¿CÃ³mo podrÃ­a un equipo utilizar los hooks de Git para reforzar la colaboraciÃ³n y el cumplimiento de las prÃ¡cticas de BDD mÃ¡s allÃ¡ de la simple ejecuciÃ³n de pruebas?

A. Para enviar automÃ¡ticamente correos electrÃ³nicos de felicitaciÃ³n a los desarrolladores que realizan commits sin fallos en las pruebas.
B. Para formatear automÃ¡ticamente el cÃ³digo segÃºn un estÃ¡ndar definido antes de cada commit.
C. Para evitar commits que no incluyan una referencia a la historia de usuario correspondiente en el mensaje.
D. Para desplegar automÃ¡ticamente la Ãºltima versiÃ³n del software a un entorno de pruebas despuÃ©s de cada push.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los hooks pueden utilizarse para hacer cumplir polÃ­ticas de commit que vinculen el cÃ³digo con los requisitos definidos en las historias de usuario, mejorando la trazabilidad y la colaboraciÃ³n.

ğŸ§  Pregunta 42
En un proyecto BDD, Â¿quÃ© valor aÃ±adido aporta la integraciÃ³n de los resultados de las pruebas de aceptaciÃ³n en las herramientas de gestiÃ³n de proyectos?

A. Permite al equipo de marketing conocer las Ãºltimas funcionalidades implementadas.
B. Facilita el seguimiento del progreso de las historias de usuario al mostrar el estado de cumplimiento de sus criterios de aceptaciÃ³n.
C. Automatiza la asignaciÃ³n de tareas a los desarrolladores en funciÃ³n de los fallos en las pruebas.
D. Permite a los stakeholders participar directamente en la ejecuciÃ³n de las pruebas.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La visibilidad del estado de las pruebas de aceptaciÃ³n en las herramientas de gestiÃ³n de proyectos proporciona una visiÃ³n clara del avance y el cumplimiento de los requisitos.

ğŸ§  Pregunta 43
Â¿CÃ³mo podrÃ­a el uso avanzado de git log con opciones de filtrado ser beneficioso para un equipo que utiliza BDD?

A. Para identificar rÃ¡pidamente commits que introdujeron fallos en las pruebas de rendimiento.
B. Para rastrear los commits asociados a una historia de usuario especÃ­fica o a un conjunto de escenarios BDD.
C. Para generar automÃ¡ticamente la documentaciÃ³n tÃ©cnica del proyecto a partir del historial de commits.
D. Para visualizar la topologÃ­a de las ramas del repositorio de forma mÃ¡s clara.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Filtrar el historial de commits por palabras clave relacionadas con historias de usuario o escenarios BDD facilita la comprensiÃ³n de quÃ© cambios implementaron quÃ© requisitos.

ğŸ§  Pregunta 44
En un entorno BDD, Â¿cÃ³mo se podrÃ­a utilizar un alias de Git para simplificar el proceso de creaciÃ³n de una nueva rama basada en una historia de usuario y la creaciÃ³n de su worktree asociado?

A. Un alias no puede automatizar la creaciÃ³n de worktrees.
B. Se podrÃ­a crear un alias que tome como argumento el ID de la historia de usuario y ejecute los comandos necesarios para crear la rama y el worktree con nombres basados en ese ID.
C. Los alias de Git solo pueden utilizarse para acortar comandos existentes, no para combinar varios.
D. La creaciÃ³n de ramas y worktrees debe realizarse siempre de forma manual para evitar errores.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los alias de Git pueden combinar mÃºltiples comandos, facilitando flujos de trabajo comunes como la creaciÃ³n de ramas y worktrees para nuevas funcionalidades.

ğŸ§  Pregunta 45
Â¿QuÃ© implicaciÃ³n tiene para la mantenibilidad de la suite de pruebas BDD el uso efectivo de expresiones regulares en los steps de Behave?

A. Reduce la necesidad de actualizar los steps cuando se realizan cambios en la interfaz de usuario.
B. Permite que los steps sean mÃ¡s especÃ­ficos y, por lo tanto, mÃ¡s fÃ¡ciles de entender.
C. Facilita la adaptaciÃ³n de los steps a variaciones en los datos o en la estructura de los escenarios sin necesidad de escribir nuevos steps.
D. Mejora el rendimiento de la ejecuciÃ³n de las pruebas al hacer que la bÃºsqueda de coincidencias sea mÃ¡s rÃ¡pida.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La flexibilidad de las expresiones regulares hace que los steps sean mÃ¡s resilientes a los cambios y reduce la cantidad de cÃ³digo de prueba que necesita ser mantenido.

ğŸ§  Pregunta 46
En el contexto del Four Test Pattern y BDD, Â¿cÃ³mo se complementan las pruebas del sistema con las pruebas de aceptaciÃ³n?

A. Las pruebas del sistema validan el rendimiento y la escalabilidad, mientras que las pruebas de aceptaciÃ³n se centran en la funcionalidad.
B. Las pruebas del sistema son escritas por desarrolladores, y las pruebas de aceptaciÃ³n por testers.
C. Las pruebas del sistema se ejecutan en un entorno simulado, mientras que las pruebas de aceptaciÃ³n se ejecutan en el entorno de producciÃ³n.
D. Las pruebas del sistema verifican que todos los componentes del sistema trabajen juntos correctamente, mientras que las pruebas de aceptaciÃ³n validan que el sistema cumpla con los requisitos del usuario final.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: Ambas son pruebas de alto nivel, pero las pruebas del sistema se enfocan en la integraciÃ³n de todos los componentes, mientras que las pruebas de aceptaciÃ³n se centran en el valor entregado al usuario.

ğŸ§  Pregunta 47
Â¿QuÃ© estrategia podrÃ­a utilizar un equipo BDD para asegurar que los nuevos miembros comprendan y sigan las convenciones de commit establecidas?

A. Confiar en la documentaciÃ³n interna y la formaciÃ³n inicial.
B. Implementar un hook commit-msg que valide el formato de los mensajes y proporcione retroalimentaciÃ³n inmediata.
C. Realizar revisiones manuales del historial de commits de cada nuevo miembro.
D. Limitar la capacidad de los nuevos miembros para realizar commits hasta que demuestren un conocimiento adecuado.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los hooks proporcionan una forma automatizada y consistente de hacer cumplir las polÃ­ticas del equipo, asegurando que todos sigan las mismas prÃ¡cticas.

ğŸ§  Pregunta 48
Â¿CÃ³mo podrÃ­a la integraciÃ³n de Git con herramientas de seguimiento de tiempo beneficiar a un proyecto que utiliza BDD?

A. Permite facturar automÃ¡ticamente a los clientes en funciÃ³n de la cantidad de commits realizados.
B. Facilita la asociaciÃ³n del tiempo dedicado al desarrollo con las historias de usuario y los escenarios BDD correspondientes.
C. Automatiza la generaciÃ³n de informes de productividad de los desarrolladores.
D. Permite pausar automÃ¡ticamente el seguimiento del tiempo cuando se detectan fallos en las pruebas BDD.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Vincular el tiempo de trabajo con los requisitos ayuda a comprender el esfuerzo dedicado a cada funcionalidad y a mejorar la planificaciÃ³n futura.

ğŸ§  Pregunta 49
En un flujo de trabajo BDD, Â¿quÃ© consideraciones se deben tener al reescribir el historial de Git para eliminar informaciÃ³n sensible accidentalmente commiteada?

A. No es necesario informar al equipo si la informaciÃ³n sensible se eliminÃ³ rÃ¡pidamente.
B. Es crucial coordinar con todo el equipo y proporcionar instrucciones claras sobre cÃ³mo actualizar sus repositorios locales para evitar la pÃ©rdida de trabajo.
C. La reescritura del historial solo debe realizarse en ramas personales y nunca en ramas compartidas.
D. Es mejor dejar la informaciÃ³n sensible en el historial y simplemente evitar mencionarla en el futuro.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La reescritura del historial en repositorios compartidos requiere una comunicaciÃ³n cuidadosa para evitar problemas de sincronizaciÃ³n y pÃ©rdida de datos entre los miembros del equipo.

ğŸ§  Pregunta 50
Â¿CÃ³mo podrÃ­a un equipo BDD utilizar las capacidades de branching y merging de Git para gestionar el desarrollo de mÃºltiples funcionalidades complejas con muchos escenarios BDD asociados?

A. Desarrollando todas las funcionalidades directamente en la rama principal para evitar la complejidad de las merges.
B. Creando ramas de funcionalidades separadas para cada conjunto de escenarios BDD y utilizando merges estratÃ©gicos para integrar el trabajo, asegurando que todas las pruebas pasen antes de la integraciÃ³n.
C. Utilizando una Ãºnica rama de desarrollo a largo plazo donde todos los desarrolladores realizan commits directamente.
D. Evitando la creaciÃ³n de ramas y utilizando solo commits directos para simplificar el flujo de trabajo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las ramas de funcionalidades permiten el desarrollo aislado y la validaciÃ³n completa de cada conjunto de requisitos antes de su integraciÃ³n, manteniendo la estabilidad de la rama principal.