ğŸ§  Pregunta 1
Â¿QuÃ© funciÃ³n cumple el hook pre-commit en Git cuando se usa con regex para validar archivos?

A. Verifica que los mensajes de commit sigan un formato especÃ­fico
B. Filtra archivos no permitidos (ej. extensiones no vÃ¡lidas) antes del commit
C. Detecta conflictos de merge automÃ¡ticamente
D. Ejecuta pruebas unitarias en paralelo

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El hook pre-commit valida los archivos en staging (ej. con regex como \.(py|js)$) y rechaza el commit si no cumplen las reglas definidas.

ğŸ§  Pregunta 2
En el patrÃ³n ^(feat|fix|docs)\([a-z0-9\-]+\)?:, Â¿quÃ© representa el sÃ­mbolo \(?

A. Un grupo opcional de caracteres
B. Un parÃ©ntesis literal escapado para el "scope"
C. Una disyunciÃ³n entre tipos de commit
D. El inicio de un comentario

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La barra inversa (\) escapa el parÃ©ntesis, permitiendo que se interprete como carÃ¡cter literal en el "scope" (ej. fix(ui):).

ğŸ§  Pregunta 3
Â¿QuÃ© principio FIRST se viola si una prueba con regex tarda 10 segundos en ejecutarse?

A. Isolated
B. Fast
C. Repeatable
D. Self-validating

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El principio Fast exige que las pruebas sean rÃ¡pidas para facilitar iteraciones frecuentes. Regex complejas con backtracking pueden ralentizarlas.

ğŸ§  Pregunta 4
En el ciclo RGR (Red-Green-Refactor), la fase "Red" implica:

A. Escribir una regex que pase todos los tests existentes
B. Crear un test que falle por no implementar el requisito
C. Optimizar la regex sin modificar su funcionalidad
D. Documentar la expresiÃ³n regular en un reporte

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: En "Red" se escribe un test que falle (ej. validar un nuevo formato de email), para luego implementar la regex en "Green".

ğŸ§  Pregunta 5
Â¿QuÃ© ventaja tiene usar re.VERBOSE en regex de Python?

A. Permite anclajes mÃ¡s flexibles
B. Mejora el rendimiento de la expresiÃ³n
C. Facilita la legibilidad con comentarios y espacios
D. Hace opcionales todos los grupos de captura

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: re.VERBOSE ignora espacios y permite comentarios, haciendo patrones complejos mÃ¡s legibles (ej. separar partes de un email).

ğŸ§  Pregunta 6
En GitHub Actions, Â¿quÃ© patrÃ³n filtrarÃ­a tags como v1.2.3?

A. 'v[0-9].[0-9].[0-9]'
B. 'v[0-9]+.[0-9]+.[0-9]+'
C. '^v\d{1,2}\.\d{1,2}\.\d{1,2}$'
D. 'v*.*.*'

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: [0-9]+ captura uno o mÃ¡s dÃ­gitos, permitiendo versiones como v1.22.3. Las otras opciones son demasiado restrictivas o inexactas.

ğŸ§  Pregunta 7
Â¿QuÃ© aseveraciÃ³n es cierta sobre el lookahead (?=.*[A-Z]) en regex?

A. Consume caracteres hasta encontrar una mayÃºscula
B. Verifica que haya al menos una mayÃºscula sin consumir texto
C. Busca mayÃºsculas solo al inicio de la cadena
D. Es equivalente a [A-Z] sin anclajes

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los lookaheads (?=) verifican condiciones sin consumir texto. Este en particular asegura que exista una mayÃºscula en cualquier posiciÃ³n.

ğŸ§  Pregunta 8
En el patrÃ³n \b(?:cat|dog)s?\b, Â¿quÃ© indica (?: ... )?

A. Un grupo de captura obligatorio
B. Un grupo no capturado (solo agrupaciÃ³n)
C. Una condiciÃ³n opcional
D. Un comentario interno

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: (?: ... ) agrupa opciones (cat|dog) sin capturar el match, mejorando eficiencia y evitando grupos innecesarios.