ğŸ§  Pregunta 1
Â¿CuÃ¡l es una de las principales ventajas de automatizar el testing dentro de un pipeline DevOps?

A. Permitir ciclos de prueba mÃ¡s lentos pero detallados
B. Eliminar la necesidad de pruebas de integraciÃ³n
C. Detectar errores de forma continua y temprana
D. Reemplazar completamente las pruebas de usuario final

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La automatizaciÃ³n permite validar continuamente el cÃ³digo en cada cambio, detectando regresiones y errores antes de llegar a producciÃ³n.

ğŸ§  Pregunta 2
SegÃºn los principios SOLID aplicados al testing, Â¿quÃ© busca el principio de Responsabilidad Ãšnica (SRP) en una prueba?

A. Que cada prueba use mÃºltiples fixtures
B. Que cada test tenga al menos tres asserts
C. Que cada test valide exactamente un comportamiento
D. Que los tests compartan configuraciones globales

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: SRP aplicado a tests implica que cada uno debe verificar un Ãºnico aspecto del comportamiento para facilitar su mantenimiento y diagnÃ³stico.

ğŸ§  Pregunta 3
Â¿QuÃ© tipo de fixture en pytest se utiliza para crear instancias listas para usar de forma reutilizable?

A. Setter-like
B. Interface-driven
C. Constructor-like
D. Monkeypatch

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las fixtures constructor-like actÃºan como fÃ¡bricas de objetos configurados y se usan comÃºnmente en etapas de integraciÃ³n.

ğŸ§  Pregunta 4
Â¿CuÃ¡l es el rol de las fixtures Interface-driven en pruebas unitarias?

A. Exponer mÃºltiples mÃ©todos para distintos propÃ³sitos
B. Simular interfaces reales de manera ligera y controlada
C. Modificar variables de entorno en tiempo de ejecuciÃ³n
D. Administrar conexiones de red reales

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Estas fixtures imitan solo la interfaz necesaria para la lÃ³gica de negocio, permitiendo ejecutar pruebas rÃ¡pidas y aisladas.

ğŸ§  Pregunta 5
Â¿QuÃ© principio SOLID se cumple cuando se parametrizan pruebas en pytest sin modificar la lÃ³gica del test?

A. Liskov Substitution Principle (LSP)
B. Open/Closed Principle (OCP)
C. Interface Segregation Principle (ISP)
D. Dependency Inversion Principle (DIP)

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El principio abierto/cerrado (OCP) indica que los tests deben ser extensibles sin necesidad de modificarlos, como al agregar nuevas entradas en una lista parametrizada.

ğŸ§  Pregunta 6
Â¿QuÃ© papel cumplen los reportes de cobertura en un pipeline DevOps?

A. Medir el uso de CPU durante las pruebas
B. Determinar el tamaÃ±o del repositorio
C. Verificar quÃ© porciones del cÃ³digo han sido ejecutadas
D. Asegurar que no se repitan commits idÃ©nticos

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los reportes de cobertura permiten identificar quÃ© lÃ­neas del cÃ³digo fueron cubiertas por las pruebas, ayudando a detectar zonas no testeadas.

ğŸ§  Pregunta 7
Â¿CuÃ¡l es la principal ventaja de usar create_autospec() en mocks?

A. Crea tests mÃ¡s lentos pero detallados
B. Obliga a que el mock siga la interfaz original
C. Permite ejecutar cÃ³digo sin importar los argumentos
D. Elimina la necesidad de escribir asserts

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: create_autospec() fuerza que el mock respete la firma del objeto real, lo que asegura cumplimiento del principio Liskov.

ğŸ§  Pregunta 8
Â¿QuÃ© busca el principio DIP (Dependency Inversion Principle) en el diseÃ±o de pruebas?

A. Que el test conozca cada detalle del backend
B. Que el test use mocks al azar
C. Que el cÃ³digo de producciÃ³n dependa de abstracciones
D. Que las fixtures compartan la base de datos real

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: DIP promueve que el cÃ³digo de alto nivel (como los tests) interactÃºe con interfaces abstractas, no con implementaciones concretas.

ğŸ§  Pregunta 9
Â¿CuÃ¡l es una tÃ©cnica para acelerar pipelines en DevOps sin comprometer la cobertura?

A. Reducir la cantidad de asserts
B. Eliminar tests de integraciÃ³n
C. Usar caching y ejecuciÃ³n paralela
D. Ejecutar sÃ³lo tests visuales

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El uso de caching y ejecuciÃ³n paralela acelera los pipelines sin sacrificar la calidad o cobertura de pruebas.

ğŸ§  Pregunta 10
Â¿QuÃ© tipo de pruebas automatizadas simulan la experiencia completa del usuario?

A. Unitarias
B. Benchmarks
C. End-to-End (E2E)
D. Linters

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las pruebas end-to-end (como con Selenium o Playwright) replican el flujo real del usuario para validar la aplicaciÃ³n completa.

ğŸ§  Pregunta 11
Â¿Por quÃ© se deben evitar mÃºltiples asserts en una sola prueba?

A. Porque el cÃ³digo se vuelve mÃ¡s eficiente
B. Para cumplir con SRP y facilitar diagnÃ³stico
C. Para reducir el tiempo total de ejecuciÃ³n
D. Porque las pruebas pierden cobertura

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Al usar un solo assert por prueba, se mantiene el principio de responsabilidad Ãºnica (SRP), lo que mejora legibilidad y mantenimiento.

ğŸ§  Pregunta 12
Â¿CuÃ¡l es el propÃ³sito de etiquetar pruebas con @unit o @integration en pytest?

A. Indicar la complejidad del cÃ³digo
B. Mostrar quÃ© desarrollador escribiÃ³ el test
C. Agrupar pruebas por tipo y comportamiento
D. Asignar colores en la salida de consola

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las etiquetas permiten agrupar y ejecutar selectivamente diferentes tipos de pruebas en distintos entornos del pipeline.

ğŸ§  Pregunta 13
Â¿QuÃ© ventaja aporta el principio ISP (Interface Segregation Principle) en el diseÃ±o de fixtures?

A. Que cada fixture tenga mÃºltiples responsabilidades
B. Que las fixtures sean intercambiables entre pipelines
C. Que cada fixture exponga sÃ³lo lo necesario para el test
D. Que los tests puedan funcionar sin asserts

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: ISP implica que cada fixture tenga una interfaz especÃ­fica y acotada, facilitando su composiciÃ³n y reutilizaciÃ³n.

ğŸ§  Pregunta 14
En pytest, Â¿quÃ© permite lograr la parametrizaciÃ³n de pruebas?

A. Ejecutar un test en paralelo
B. Separar los tests por lenguaje
C. Reutilizar un test con mÃºltiples entradas
D. Obtener cobertura del sistema operativo

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La parametrizaciÃ³n permite correr un mismo test varias veces con diferentes datos de entrada, sin duplicar lÃ³gica.

ğŸ§  Pregunta 15
Â¿CuÃ¡l es una funciÃ³n clave de las fixtures en pipelines DevOps?

A. Verificar la integridad del cÃ³digo
B. Inyectar dependencias de manera declarativa
C. Ejecutar scripts de producciÃ³n
D. Reemplazar scripts de CI/CD

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las fixtures permiten declarar quÃ© necesita un test y pytest se encarga de proveerlo en tiempo de ejecuciÃ³n.

ğŸ§  Pregunta 16
Â¿QuÃ© ocurre si se incumple el principio LSP en un mock?

A. El mock no genera errores
B. Los tests ejecutan mÃ¡s rÃ¡pido
C. El mock puede romperse si cambia la interfaz real
D. Las fixtures se reinician automÃ¡ticamente

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Si un mock no respeta la firma original, cualquier cambio en la clase real no se refleja y puede causar errores silenciosos.

ğŸ§  Pregunta 17
Â¿QuÃ© tipo de fixture es ideal para simular fallos en servicios externos durante pruebas?

A. Interface-driven
B. Setter-like
C. Constructor-like
D. Lambda fixtures

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las fixtures Setter-like permiten modificar dinÃ¡micamente comportamientos del cÃ³digo durante un test, Ãºtiles para simular fallos.

ğŸ§  Pregunta 18
Â¿QuÃ© significa que una suite de pruebas sea "chaos-friendly"?

A. Puede ejecutarse sin importar el orden
B. Detecta errores al azar
C. Valida resiliencia ante errores simulados
D. No requiere infraestructura

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las suites chaos-friendly introducen fallos controlados para probar la robustez del sistema frente a situaciones inesperadas.

ğŸ§  Pregunta 19
Â¿CuÃ¡l es el objetivo de una fixture constructor-like con scope "session"?

A. Crear una instancia nueva por test
B. Simular errores de infraestructura
C. Reutilizar una instancia a lo largo de toda la sesiÃ³n
D. Resetear variables globales

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El scope "session" permite inicializar una vez una fixture que serÃ¡ compartida por todos los tests en esa sesiÃ³n, mejorando rendimiento.

ğŸ§  Pregunta 20
Â¿QuÃ© tipo de test se ejecuta mÃ¡s rÃ¡pido y de forma aislada?

A. Unit Test
B. Integration Test
C. End-to-End Test
D. Benchmark Test

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: Las pruebas unitarias validan funciones individuales sin depender de servicios externos, por lo que son rÃ¡pidas y estables.

ğŸ§  Pregunta 21
Â¿CuÃ¡l es el beneficio de usar pytest-benchmark?

A. Automatizar commits desde tests
B. Evaluar el rendimiento de funciones crÃ­ticas
C. Mostrar grÃ¡ficamente los cambios del cÃ³digo
D. Verificar uso de memoria

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: pytest-benchmark permite medir el rendimiento de funciones, registrando mÃ©tricas como latencia y throughput.

ğŸ§  Pregunta 22
Â¿QuÃ© permite la trazabilidad completa de un pipeline de testing?

A. Reutilizar variables en tiempo de ejecuciÃ³n
B. Visualizar cada ejecuciÃ³n en vivo
C. Almacenar artefactos como logs y reportes
D. Ejecutar el pipeline sin cobertura

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La trazabilidad se logra guardando los artefactos generados (logs, binarios, mÃ©tricas), Ãºtiles para auditorÃ­a o diagnÃ³stico posterior.

ğŸ§  Pregunta 23
Â¿QuÃ© tÃ©cnica permite ejecutar un mismo conjunto de pruebas con diferentes backends sin modificar el test?

A. Caching de paquetes
B. InversiÃ³n de dependencias con fixtures
C. Uso de asserts mÃºltiples
D. ParalelizaciÃ³n por mÃ³dulos

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Al aplicar DIP con fixtures, se puede reutilizar el mismo test inyectando distintas implementaciones segÃºn el entorno.

ğŸ§  Pregunta 24
Â¿QuÃ© se debe evitar para mantener un pipeline eficiente y lÃ³gico?

A. Correr todos los tests en paralelo sin validaciÃ³n
B. Ejecutar pruebas end-to-end antes que las unitarias
C. Generar reportes de cobertura
D. Parametrizar los tests unitarios

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un pipeline eficiente solo avanza a fases complejas si las bÃ¡sicas han sido validadas; no se deben ejecutar pruebas costosas si las bÃ¡sicas fallan.

ğŸ§  Pregunta 25
Â¿QuÃ© principio SOLID se refleja cuando se agregan nuevos casos a una lista de pruebas sin modificar el test?

A. SRP
B. OCP
C. LSP
D. DIP

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El principio Open/Closed indica que el cÃ³digo debe estar abierto a extensiones, pero cerrado a modificaciones, como al usar @pytest.mark.parametrize.

ğŸ§  Pregunta 26
Â¿QuÃ© ventaja proporciona usar pytest con --cov en un pipeline?

A. Elimina las advertencias del cÃ³digo
B. Verifica si se alcanzÃ³ un porcentaje mÃ­nimo de cobertura
C. Evita que se ejecuten pruebas redundantes
D. Acelera la ejecuciÃ³n al evitar fixtures

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El parÃ¡metro --cov junto con --fail-under permite bloquear el pipeline si no se alcanza un umbral mÃ­nimo de cobertura de cÃ³digo.

ğŸ§  Pregunta 27
Â¿QuÃ© caracterÃ­stica distingue a las fixtures Interface-driven?

A. Simulan fallos de red de forma automÃ¡tica
B. Proveen instancias de clases abstractas
C. Implementan sÃ³lo lo necesario para los tests
D. Requieren base de datos real para operar

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Estas fixtures cumplen Ãºnicamente la interfaz esperada por la lÃ³gica de negocio, permitiendo tests rÃ¡pidos, ligeros y desacoplados.

ğŸ§  Pregunta 28
Â¿QuÃ© estrategia se recomienda aplicar cuando se heredan suites de pruebas lentas y acopladas?

A. Reescribir todos los tests desde cero
B. Usar linters para minimizar asserts
C. Aplicar el enfoque Boy-Scout para refactor progresivo
D. Ejecutar los tests sÃ³lo en producciÃ³n

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El enfoque Boy-Scout propone mejorar cada test al ser tocado, aplicando SRP, OCP, autospecs y mejorando fixtures paso a paso.

ğŸ§  Pregunta 29
Â¿CuÃ¡l es un beneficio clave del principio Open/Closed en tests?

A. Reducir la necesidad de mocks
B. Permitir agregar nuevos escenarios sin modificar la lÃ³gica del test
C. Evitar la ejecuciÃ³n en paralelo
D. Eliminar la necesidad de asserts

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Con OCP, los tests estÃ¡n abiertos a extensiÃ³n (por ejemplo, nuevos datos en parametrizaciÃ³n), pero cerrados a cambios en su estructura.

ğŸ§  Pregunta 30
Â¿QuÃ© ocurre si una fixture comparte mÃºltiples responsabilidades?

A. Se facilita el mantenimiento
B. Se mejora la trazabilidad
C. Se viola el principio SRP
D. Se acelera la ejecuciÃ³n del pipeline

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Cada fixture debe encargarse de una sola cosa. Si tiene mÃºltiples responsabilidades, se rompe el principio de responsabilidad Ãºnica.

ğŸ§  Pregunta 31
Â¿CuÃ¡l es el uso principal de las fixtures Setter-like?

A. Crear entornos de integraciÃ³n en staging
B. Definir tests crÃ­ticos en producciÃ³n
C. Proveer funciones para alterar comportamientos en tiempo de ejecuciÃ³n
D. Ejecutar comandos del sistema operativo

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las Setter-like permiten modificar el comportamiento de dependencias o mÃ³dulos con parches temporales, ideales para simular fallos o estados especÃ­ficos.

ğŸ§  Pregunta 32
Â¿Por quÃ© es importante aplicar el principio LSP (Liskov Substitution Principle) al usar mocks?

A. Para que los tests se ejecuten sin docker
B. Para garantizar que los mocks respeten la interfaz original
C. Para eliminar la cobertura de cÃ³digo
D. Para deshabilitar fixtures por entorno

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: LSP exige que los mocks puedan sustituir a los objetos reales sin romper el cÃ³digo; create_autospec ayuda a verificar esto.

ğŸ§  Pregunta 33
Â¿QuÃ© se logra con un pipeline que bloquea el despliegue si la cobertura cae por debajo de un umbral?

A. Asegurar estabilidad visual
B. Evitar pÃ©rdida de commits
C. Garantizar calidad y control de regresiones
D. Automatizar los commits

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al imponer umbrales mÃ­nimos de cobertura, se obliga a mantener un estÃ¡ndar de calidad que previene errores en producciÃ³n.

ğŸ§  Pregunta 34
Â¿CÃ³mo se determina si usar un stub o una implementaciÃ³n real en un fixture Interface-driven?

A. Revisando si el test es rÃ¡pido
B. Por el nÃºmero de asserts
C. A travÃ©s de variables de entorno
D. SegÃºn la profundidad del stack trace

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las fixtures pueden detectar variables de entorno para decidir entre usar una implementaciÃ³n real o un stub, sin cambiar el test.

ğŸ§  Pregunta 35
Â¿CuÃ¡l es una funciÃ³n clave del caching en pipelines DevOps?

A. Aumentar el tiempo de espera para pruebas lentas
B. Simular redes lentas en staging
C. Almacenar dependencias para acelerar futuras ejecuciones
D. Eliminar etapas duplicadas en producciÃ³n

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Al cachear dependencias como pip o node_modules, se evita reinstalarlas cada vez, reduciendo el tiempo total de ejecuciÃ³n.

ğŸ§  Pregunta 36
Â¿QuÃ© tipo de pruebas suelen ejecutarse primero en un pipeline CI/CD?

A. End-to-End
B. Benchmarks
C. Unitarias
D. Visuales

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las pruebas unitarias, al ser rÃ¡pidas y aisladas, se ejecutan primero para detectar errores tempranos antes de pasar a pruebas mÃ¡s costosas.

ğŸ§  Pregunta 37
Â¿CuÃ¡l es el objetivo principal de una fixture con scope="session"?

A. Ejecutar sÃ³lo una vez por entorno
B. Crear una sesiÃ³n de debugging
C. Compartir una instancia durante toda la sesiÃ³n de testing
D. Permitir cambios dinÃ¡micos en variables de entorno

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Este tipo de fixture se inicializa una vez y se reutiliza en toda la sesiÃ³n, ahorrando recursos en componentes pesados.

ğŸ§  Pregunta 38
Â¿QuÃ© representa la inyecciÃ³n de dependencias con fixtures en Pytest?

A. La automatizaciÃ³n de linters
B. La delegaciÃ³n del setup a un framework externo
C. La separaciÃ³n entre lo que se necesita y cÃ³mo se obtiene
D. La ejecuciÃ³n paralela de tests

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La DI con fixtures permite que los tests solo indiquen quÃ© requieren, y Pytest se encarga de resolverlo en tiempo de ejecuciÃ³n.

ğŸ§  Pregunta 39
Â¿QuÃ© permite validar un benchmark en pytest?

A. Que los tests se ejecuten en menos de 1 segundo
B. Que el resultado sea superior a cero
C. Que no se usen stubs
D. Que se alcance el 100 % de cobertura

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un benchmark valida el rendimiento de una funciÃ³n. Se usa un assert simple para evitar falsos positivos sin lÃ³gica funcional.

ğŸ§  Pregunta 40
Â¿CuÃ¡l es un ejemplo tÃ­pico del principio DIP aplicado con fixtures?

A. Incluir funciones utilitarias en cada test
B. Reutilizar variables globales para mejorar la cobertura
C. Usar una fixture que devuelva una interfaz de repositorio
D. Declarar rutas de acceso en cada funciÃ³n de prueba

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: DIP promueve que el cÃ³digo y los tests dependan de abstracciones, no de detalles concretos; una fixture que devuelve una interfaz cumple con esta idea.

ğŸ§  Pregunta 41
Â¿CuÃ¡l es el propÃ³sito de un trace-id en una prueba automatizada?

A. Agregar color a los logs
B. Validar si el test tiene fixtures
C. Correlacionar mÃ©tricas y peticiones en herramientas de observabilidad
D. Ejecutar los tests en staging

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El uso de trace-id permite seguir el rastro de una peticiÃ³n a travÃ©s de distintas capas del sistema y vincularla a una prueba concreta.

ğŸ§  Pregunta 42
Â¿QuÃ© principio se refleja cuando una misma prueba se puede ejecutar tanto con SQLite como con Postgres sin cambios?

A. SRP
B. LSP
C. DIP
D. ISP

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Esto se logra gracias a la inversiÃ³n de dependencias: el test trabaja con una interfaz y no le importa la implementaciÃ³n concreta.

ğŸ§  Pregunta 43
Â¿CuÃ¡l es una ventaja de las pruebas chaos-friendly?

A. Permiten omitir casos extremos
B. Simulan errores para validar resiliencia del sistema
C. Desactivan servicios externos
D. Evitan usar mocks y stubs

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Estas pruebas inyectan fallos intencionales (latencias, errores) para validar cÃ³mo responde la lÃ³gica ante perturbaciones reales.

ğŸ§  Pregunta 44
Â¿Por quÃ© las fixtures ayudan a escalar las suites de testing en DevOps?

A. Reducen la cantidad de asserts por test
B. Automatizan la actualizaciÃ³n del README
C. Permiten reutilizar configuraciÃ³n sin duplicar cÃ³digo
D. Eligen automÃ¡ticamente el entorno de producciÃ³n

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las fixtures encapsulan setup, teardown y configuraciÃ³n, facilitando el mantenimiento y ampliaciÃ³n de la suite sin duplicar lÃ³gica.

ğŸ§  Pregunta 45
Â¿QuÃ© alternativa describe mejor una pipeline flexible y reproducible?

A. Ejecutar los tests sÃ³lo de forma local
B. Depender del sistema operativo del desarrollador
C. Permitir que las pruebas se adapten al entorno mediante fixtures y variables
D. Usar mÃºltiples herramientas sin control de versiones

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Un pipeline reproducible se adapta al entorno mediante fixtures, variables y estructuras bien definidas que aseguran consistencia.

ğŸ§  Pregunta 46
Â¿CÃ³mo se aplica el principio ISP al usar mÃºltiples fixtures?

A. Separando responsabilidades entre varias fixtures pequeÃ±as
B. Agrupando todos los comportamientos en una fixture
C. Evitando el uso de pytest.mark.parametrize
D. Usando Ãºnicamente stubs en todos los tests

âœ… Correcta: A
ğŸ§¾ ExplicaciÃ³n: ISP recomienda que cada "interfaz" (en este caso, cada fixture) sea especÃ­fica, clara y mÃ­nima para evitar acoplamiento innecesario.

ğŸ§  Pregunta 47
Â¿QuÃ© aspecto mejora la observabilidad cuando se usan fixtures instrumentadas?

A. El nÃºmero de asserts por test
B. La trazabilidad entre pruebas y mÃ©tricas del sistema
C. El tamaÃ±o de los commits
D. La latencia de los stubs

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las fixtures instrumentadas pueden incluir cabeceras, labels o spans que permiten relacionar pruebas con datos en el stack de monitoreo.

ğŸ§  Pregunta 48
Â¿QuÃ© estrategia permite mantener un solo conjunto de pruebas para varios entornos?

A. Definir rutas absolutas en el cÃ³digo
B. Usar print en lugar de logging
C. Cambiar la configuraciÃ³n de fixtures segÃºn el entorno
D. Ejecutar los tests solo en staging

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las fixtures pueden adaptarse usando variables como CI=true, permitiendo que un mismo test funcione en local, CI y staging.

ğŸ§  Pregunta 49
Â¿CuÃ¡l es la principal razÃ³n para documentar los pipelines con README o convenciones de marcado?

A. Mostrar mÃ©tricas en producciÃ³n
B. Reducir el tiempo de ejecuciÃ³n
C. Facilitar el mantenimiento y comprensiÃ³n a largo plazo
D. Eliminar la necesidad de pruebas

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La documentaciÃ³n ayuda a mantener claridad sobre cÃ³mo y por quÃ© se ejecuta cada paso del pipeline, especialmente Ãºtil en equipos grandes.

ğŸ§  Pregunta 50
Â¿QuÃ© permiten los filtros por ruta en pipelines CI/CD?

A. Asegurar la ejecuciÃ³n de pruebas no relacionadas
B. Repetir todos los tests en cada commit
C. Ejecutar solo las pruebas afectadas por los cambios
D. Ejecutar pruebas en orden alfabÃ©tico

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Con filtros por ruta, se ejecutan Ãºnicamente los tests relacionados con los archivos modificados, lo que mejora la eficiencia del pipeline.

