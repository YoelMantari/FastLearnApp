ğŸ§  Pregunta 1

Â¿CuÃ¡l es el objetivo principal de clasificar y priorizar las pruebas en un entorno de desarrollo y entrega continua?

A. Asegurar que todas las pruebas tengan la misma importancia y se ejecuten con la misma frecuencia.
B. DiseÃ±ar pipelines que ejecuten primero las pruebas mÃ¡s costosas para identificar problemas tempranamente.
C. DiseÃ±ar pipelines que ejecuten primero las pruebas mÃ¡s crÃ­ticas y difieran las mÃ¡s costosas para acelerar el feedback loop.
D. Reducir la cantidad total de pruebas necesarias para mantener la calidad del software.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Clasificar y priorizar las pruebas permite enfocar los esfuerzos iniciales en validar la funcionalidad esencial y postergar las pruebas que consumen mÃ¡s tiempo, optimizando asÃ­ el ciclo de retroalimentaciÃ³n.

ğŸ§  Pregunta 2

Â¿QuÃ© caracterÃ­stica distingue a los "tests unitarios rÃ¡pidos" de los "tests de integraciÃ³n ligera"?

A. Los tests unitarios rÃ¡pidos interactÃºan con bases de datos reales, mientras que los de integraciÃ³n ligera no.
B. Los tests de integraciÃ³n ligera simulan dependencias con mocks y stubs, mientras que los unitarios rÃ¡pidos conectan componentes reales.
C. La duraciÃ³n tÃ­pica de los tests unitarios rÃ¡pidos es mayor que la de los tests de integraciÃ³n ligera.
D. Los tests unitarios rÃ¡pidos se centran en validar la lÃ³gica interna de funciones, mientras que los de integraciÃ³n ligera aseguran la cohesiÃ³n entre mÃ³dulos internos.

âœ… Correcta: D
ğŸ§¾ ExplicaciÃ³n: Los tests unitarios se aÃ­slan para verificar unidades de cÃ³digo individuales, mientras que los tests de integraciÃ³n verifican la interacciÃ³n entre diferentes partes del sistema, aunque utilizando a menudo componentes simulados para ser mÃ¡s rÃ¡pidos.

ğŸ§  Pregunta 3

Â¿CuÃ¡l es el propÃ³sito principal de un "pipeline de pre-commit o pre-push"?

A. Ejecutar la suite de pruebas completa antes de cada commit para asegurar la mÃ¡xima calidad del cÃ³digo.
B. Validar cambios complejos y despliegues en entornos reales antes de la integraciÃ³n.
C. Proporcionar feedback inmediato al desarrollador mediante la ejecuciÃ³n de tests rÃ¡pidos y la validaciÃ³n de estilo del cÃ³digo.
D. Generar informes detallados de cobertura y benchmarking comparativo para el equipo de desarrollo.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El pipeline de pre-commit/pre-push estÃ¡ diseÃ±ado para ofrecer una validaciÃ³n rÃ¡pida y temprana de los cambios locales del desarrollador, ayudando a identificar y corregir problemas antes de que se compartan con el equipo.

ğŸ§  Pregunta 4

Â¿CÃ³mo ayuda el "Test Impact Analysis (TIA)" a optimizar la ejecuciÃ³n de pruebas?

A. Ejecuta la suite de pruebas completa de forma mÃ¡s eficiente mediante la paralelizaciÃ³n.
B. Analiza el rendimiento de las pruebas mÃ¡s lentas para identificar cuellos de botella.
C. Ejecuta solo aquellos tests que se ven afectados por un cambio de cÃ³digo especÃ­fico.
D. Reduce la cantidad de entornos de prueba necesarios al simular dependencias externas.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El TIA se enfoca en la eficiencia al identificar y ejecutar Ãºnicamente las pruebas relevantes para las modificaciones realizadas en el cÃ³digo, lo que disminuye significativamente el tiempo de ejecuciÃ³n de la suite.

ğŸ§  Pregunta 5

Â¿QuÃ© beneficio principal aporta el uso de "caching de dependencias y artefactos" en los pipelines de prueba?

A. Mejora la estabilidad de las pruebas al asegurar que siempre se utilicen las Ãºltimas versiones de las dependencias.
B. Reduce el tiempo de ejecuciÃ³n de los pipelines al evitar la descarga y reinstalaciÃ³n repetida de dependencias y la recompilaciÃ³n de artefactos.
C. Permite un mejor seguimiento de las dependencias utilizadas en cada ejecuciÃ³n de prueba.
D. Facilita la replicaciÃ³n de entornos de prueba idÃ©nticos para garantizar la consistencia.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El caching optimiza la velocidad de los pipelines al reutilizar recursos previamente descargados o construidos, lo que ahorra tiempo y ancho de banda en cada ejecuciÃ³n.

ğŸ§  Pregunta 6

Â¿CuÃ¡l es una ventaja clave de utilizar contenedores Docker para los entornos de prueba?

A. Permite compartir fÃ¡cilmente el estado de la base de datos entre diferentes ejecuciones de prueba.
B. Asegura que cada job corra en un entorno aislado y consistente, con dependencias pre-instaladas.
C. Reduce la necesidad de definir archivos de configuraciÃ³n detallados para cada prueba.
D. Aumenta la velocidad de ejecuciÃ³n de las pruebas al optimizar el uso de los recursos del sistema operativo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La contenerizaciÃ³n proporciona aislamiento y consistencia, asegurando que cada ejecuciÃ³n de prueba se realice en un entorno predecible con las dependencias necesarias, lo que contribuye a la fiabilidad y eficiencia.

ğŸ§  Pregunta 7

Â¿Por quÃ© es importante realizar una "revisiÃ³n de tests lentos" de forma periÃ³dica?

A. Para asegurar que todos los tests se ejecuten dentro de un tiempo lÃ­mite estricto.
B. Para identificar y optimizar los tests que contribuyen significativamente al tiempo total de ejecuciÃ³n de la suite.
C. Para detectar tests que no estÃ¡n cubriendo suficiente cÃ³digo y necesitan ser eliminados.
D. Para garantizar que la distribuciÃ³n de tests entre los diferentes shards de paralelizaciÃ³n sea uniforme.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Identificar y optimizar los tests mÃ¡s lentos ayuda a reducir la duraciÃ³n general de los pipelines, lo que acelera el feedback y mejora la productividad del equipo.

ğŸ§  Pregunta 8

Â¿QuÃ© se busca lograr al marcar un test como "@pytest.mark.flaky"?

A. Eliminar automÃ¡ticamente el test de la suite de pruebas para evitar fallos intermitentes.
B. Indicar que el test es inherentemente inestable y debe ser revisado en un pipeline separado para su diagnÃ³stico.
C. Reducir la prioridad del test en la ejecuciÃ³n para que no afecte los resultados de otras pruebas.
D. Ejecutar el test con un mayor nivel de aislamiento para evitar interferencias con otros tests.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Marcar tests como "flaky" permite identificarlos y aislarlos para su anÃ¡lisis, reconociendo que fallan de manera intermitente y requieren una investigaciÃ³n especÃ­fica para determinar la causa raÃ­z.

ğŸ§  Pregunta 9

Â¿CuÃ¡l es el beneficio de tener una "GuÃ­a de estilo de tests" bien definida?

A. Permite a los desarrolladores escribir tests que se ejecuten mÃ¡s rÃ¡pidamente.
B. Asegura la consistencia en la nomenclatura, estructura y organizaciÃ³n de los tests, facilitando su comprensiÃ³n y mantenimiento.
C. Reduce la cantidad de cÃ³digo necesario para escribir cada test.
D. Automatiza la generaciÃ³n de informes de cobertura de pruebas.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Una guÃ­a de estilo promueve la uniformidad en la forma en que se escriben los tests, lo que mejora la legibilidad, el mantenimiento y la colaboraciÃ³n dentro del equipo.

ğŸ§  Pregunta 10

Â¿Por quÃ© es importante fomentar una "cultura de calidad" en el equipo de desarrollo en relaciÃ³n con las pruebas?

A. Para asegurar que el equipo de pruebas sea el Ãºnico responsable de la calidad del software.
B. Para reducir la necesidad de documentaciÃ³n detallada sobre la suite de pruebas.
C. Porque la responsabilidad de la calidad se comparte entre todos los miembros del equipo, lo que lleva a un mayor compromiso con la creaciÃ³n y el mantenimiento de pruebas efectivas.
D. Para aumentar la cantidad de mÃ©tricas cuantitativas disponibles sobre la cobertura y el rendimiento de las pruebas.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Una cultura de calidad implica que todos los miembros del equipo valoran y contribuyen a las prÃ¡cticas de prueba, lo que resulta en un software de mayor calidad y una suite de pruebas mÃ¡s robusta y mantenible.

ğŸ§  Pregunta 11

SegÃºn el texto, Â¿cuÃ¡l es la duraciÃ³n tÃ­pica de un test end-to-end (E2E)?

A. Menos de 50 ms.
B. Entre 50 y 500 ms.
C. MÃ¡s de 500 ms.
D. VarÃ­a significativamente dependiendo del entorno.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los tests E2E involucran el despliegue de entornos reales y la validaciÃ³n de flujos completos, lo que generalmente resulta en una duraciÃ³n superior a 500 ms.

ğŸ§  Pregunta 12

Â¿QuÃ© tipo de pruebas se enfoca en validar la compatibilidad de APIs internas y externas?

A. Tests unitarios.
B. Tests de integraciÃ³n ligera.
C. Tests de contrato (contract tests).
D. Tests de rendimiento y estrÃ©s.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los tests de contrato estÃ¡n diseÃ±ados especÃ­ficamente para asegurar que las interfaces entre diferentes servicios o componentes se mantengan consistentes a lo largo del tiempo.

ğŸ§  Pregunta 13

En un pipeline multinivel, Â¿quÃ© tipo de tests se ejecutan tÃ­picamente en el "pipeline de pull request (CI)"?

A. Solo tests unitarios rÃ¡pidos.
B. Tests E2E completos y suites de rendimiento.
C. Tests unitarios y de integraciÃ³n ligera.
D. Todos los tipos de tests definidos.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El pipeline de pull request busca validar los cambios propuestos antes de la integraciÃ³n, por lo que se enfoca en tests rÃ¡pidos pero que cubran la lÃ³gica y la interacciÃ³n bÃ¡sica entre componentes.

ğŸ§  Pregunta 14

Â¿QuÃ© mÃ©trica ayuda a identificar las lÃ­neas o funciones de cÃ³digo cubiertas por cada test en el "Test Impact Analysis"?

A. MÃ©tricas de rendimiento.
B. MÃ©tricas de cobertura.
C. MÃ©tricas de estabilidad.
D. MÃ©tricas de complejidad.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El TIA utiliza informaciÃ³n de cobertura para mapear la relaciÃ³n entre los tests y el cÃ³digo que ejecutan, permitiendo asÃ­ identificar los tests relevantes ante un cambio.

ğŸ§  Pregunta 15

En el contexto del caching de dependencias en GitHub Actions, Â¿quÃ© propÃ³sito tiene la clave definida en el with?

A. Especificar la ruta donde se almacenarÃ¡ la cachÃ©.
B. Identificar de manera Ãºnica la cachÃ© para un conjunto especÃ­fico de dependencias.
C. Definir el tiempo de vida de la cachÃ© antes de su invalidaciÃ³n.
D. Limitar el tamaÃ±o mÃ¡ximo de la cachÃ©.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La clave se utiliza para generar un identificador Ãºnico basado en los archivos de dependencias (como requirements.txt), asegurando que se restaure la cachÃ© correcta cuando las dependencias no han cambiado.

ğŸ§  Pregunta 16

Â¿QuÃ© herramienta mencionada en el texto se puede utilizar en pytest para dividir la suite de pruebas en particiones y ejecutarlas en paralelo?

A. pytest-benchmark.
B. pytest-cov.
C. pytest-xdist.
D. pytest-flake8.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: pytest-xdist es un plugin de pytest que permite la ejecuciÃ³n distribuida de tests en mÃºltiples procesos, facilitando la paralelizaciÃ³n.

ğŸ§  Pregunta 17

Â¿CuÃ¡l es una caracterÃ­stica principal de los entornos de prueba "efÃ­meros"?

A. Mantienen el estado entre diferentes ejecuciones de prueba para acelerar la inicializaciÃ³n.
B. Se inician desde un estado limpio para cada ejecuciÃ³n, lo que aumenta la seguridad y el aislamiento.
C. Son mÃ¡s costosos de mantener debido a la necesidad de una configuraciÃ³n constante.
D. Son ideales para ejecutar pruebas de rendimiento que requieren un entorno persistente.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los entornos efÃ­meros proporcionan un alto nivel de aislamiento y evitan la acumulaciÃ³n de estado no deseado entre pruebas, aunque pueden tener un tiempo de inicializaciÃ³n mÃ¡s largo.

ğŸ§  Pregunta 18

Â¿QuÃ© tipo de servicio se menciona como una soluciÃ³n para simular APIs de terceros en los entornos de prueba?

A. Un servicio de base de datos gestionado en la nube.
B. Un sistema de gestiÃ³n de contenedores como Docker Compose.
C. Herramientas como WireMock, LocalStack o Mountebank.
D. Un servicio de monitorizaciÃ³n de rendimiento de aplicaciones (APM).

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Estas herramientas permiten crear stubs o mocks de servicios externos, lo que facilita la prueba de la lÃ³gica de la aplicaciÃ³n sin depender de la disponibilidad o el comportamiento real de esos servicios.

ğŸ§  Pregunta 19

SegÃºn el texto, Â¿quÃ© comando de pytest se utiliza para extraer el top 10 de tests mÃ¡s costosos en tÃ©rminos de tiempo de ejecuciÃ³n?

A. pytest --slowest=10.
B. pytest --profile=10.
C. pytest --durations=10.
D. pytest --time=10.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La opciÃ³n --durations=N de pytest muestra la duraciÃ³n de los N tests mÃ¡s lentos, lo que ayuda a identificar candidatos para la optimizaciÃ³n.

ğŸ§  Pregunta 20

Â¿CuÃ¡l es el objetivo principal de marcar tests con @pytest.mark.flaky?

A. Excluirlos de las ejecuciones regulares para mejorar la velocidad general.
B. Identificarlos para su posterior anÃ¡lisis y diagnÃ³stico en un pipeline separado.
C. Reducir su prioridad para que otros tests se ejecuten primero.
D. Ejecutarlos con un mayor nÃºmero de repeticiones para mitigar la incertidumbre de sus fallos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Marcar tests como "flaky" permite gestionarlos de manera especial, reconociendo su inestabilidad y facilitando su investigaciÃ³n sin afectar la fiabilidad de los resultados de la suite principal.

ğŸ§  Pregunta 21

Â¿QuÃ© tipo de mÃ©tricas, ademÃ¡s de las cuantitativas, se sugiere utilizar para obtener una visiÃ³n mÃ¡s completa del estado de la suite de pruebas?

A. MÃ©tricas de complejidad ciclomÃ¡tica del cÃ³digo probado.
B. MÃ©tricas de satisfacciÃ³n del cliente con la calidad del software.
C. Impresiones cualitativas compartidas por el equipo de desarrollo.
D. MÃ©tricas de frecuencia de despliegue y tiempo de entrega.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El feedback subjetivo de los desarrolladores puede revelar problemas o fricciones que no se reflejan directamente en los nÃºmeros de cobertura o tiempo de ejecuciÃ³n.

ğŸ§  Pregunta 22

Â¿CuÃ¡l es un ejemplo de contenido que deberÃ­a incluirse en el "README de tests"?

A. La lista completa de todos los tests y su descripciÃ³n detallada.
B. Instrucciones para ejecutar localmente cada tipo de prueba y los requisitos del entorno.
C. Los resultados histÃ³ricos de las ejecuciones de prueba y las tendencias de rendimiento.
D. El cÃ³digo fuente de los tests unitarios mÃ¡s importantes.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un buen README de tests proporciona la informaciÃ³n esencial para que cualquier desarrollador pueda entender y ejecutar las pruebas en su entorno local.

ğŸ§  Pregunta 23

Â¿QuÃ© se propone como una actividad para fomentar una "cultura de calidad" en relaciÃ³n con las pruebas?

A. Establecer cuotas obligatorias de nÃºmero de tests que cada desarrollador debe escribir.
B. Limitar el acceso a los resultados de las pruebas para evitar la desmotivaciÃ³n.
C. Realizar sesiones internas informales ("Brown Bag") sobre temas relacionados con las pruebas.
D. Externalizar la responsabilidad de las pruebas a un equipo dedicado para garantizar la objetividad.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las sesiones de intercambio de conocimiento y las actividades prÃ¡cticas ayudan a construir una cultura donde las pruebas son valoradas y comprendidas por todo el equipo.

ğŸ§  Pregunta 24

Â¿QuÃ© informaciÃ³n deberÃ­a contener una "Wiki interna o Confluence" dedicada a las pruebas?

A. Solo los resultados de las Ãºltimas ejecuciones de la suite de pruebas.
B. DocumentaciÃ³n sobre estrategias de TIA, patching, uso de mocks avanzados y prÃ¡cticas de paralelismo.
C. Un listado de los desarrolladores responsables de cada secciÃ³n de la suite de pruebas.
D. Las polÃ­ticas de calidad y los objetivos de cobertura definidos por la direcciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Una wiki interna sirve como un repositorio de conocimiento sobre las prÃ¡cticas y estrategias de prueba especÃ­ficas del equipo, facilitando el aprendizaje y la adopciÃ³n de buenas prÃ¡cticas.

ğŸ§  Pregunta 25

Â¿CuÃ¡l es el propÃ³sito de definir "Test Champions" dentro del equipo?

A. Supervisar el trabajo de los demÃ¡s desarrolladores en la creaciÃ³n de tests.
B. Actuar como punto de contacto para todas las preguntas relacionadas con las pruebas.
C. Fomentar buenas prÃ¡cticas de testing, revisar mÃ©tricas y proponer mejoras de forma rotativa.
D. Asegurar que se cumplan los plazos de entrega de las tareas de prueba.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los Test Champions ayudan a mantener el foco en la calidad, promueven la mejora continua de las prÃ¡cticas de prueba y distribuyen la responsabilidad dentro del equipo.

ğŸ§  Pregunta 26

SegÃºn el texto, Â¿quÃ© mÃ©trica DORA podrÃ­a verse afectada si los tiempos de ejecuciÃ³n de las pruebas aumentan significativamente?

A. Frecuencia de despliegue.
B. Tiempo de entrega (Lead Time).
C. Tiempo medio de recuperaciÃ³n (MTTR).
D. Tasa de cambio de fallos.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un aumento en los tiempos de prueba puede alargar el ciclo de desarrollo y entrega, impactando directamente en el tiempo que transcurre desde que se realiza un cambio en el cÃ³digo hasta que se implementa en producciÃ³n.

ğŸ§  Pregunta 27

Â¿QuÃ© se recomienda hacer con los tests que fallan de manera intermitente ("flaky tests")?

A. Eliminarlos inmediatamente de la suite de pruebas para evitar resultados confusos.
B. Marcarlos y destinarlos a un pipeline separado para su diagnÃ³stico.
C. Ejecutarlos con mayor frecuencia para intentar reproducir el fallo de manera consistente.
D. Ignorarlos temporalmente si no afectan la funcionalidad principal.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los tests "flaky" requieren una atenciÃ³n especial para identificar la causa de su inestabilidad y corregirla, por lo que se recomienda aislarlos para su anÃ¡lisis.

ğŸ§  Pregunta 28

Â¿CuÃ¡l es un beneficio de utilizar "templates para nuevos tests"?

A. Asegurar que todos los tests tengan exactamente la misma duraciÃ³n.
B. Reducir la necesidad de que los desarrolladores aprendan los detalles de los frameworks de prueba.
C. Proporcionar archivos base con cÃ³digo comÃºn (boilerplate) para facilitar la creaciÃ³n de nuevos tests.
D. Automatizar la generaciÃ³n de documentaciÃ³n para cada nuevo test creado.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los templates agilizan la creaciÃ³n de nuevos tests al proporcionar una estructura inicial y cÃ³digo reutilizable, lo que ahorra tiempo y promueve la consistencia.

ğŸ§  Pregunta 29

Â¿QuÃ© se sugiere hacer periÃ³dicamente para mantener la suite de pruebas saludable?

A. Aumentar la cantidad total de tests para mejorar la cobertura.
B. Ejecutar la suite completa con mayor frecuencia para detectar problemas tempranamente.
C. Eliminar tests duplicados o irrelevantes.
D. Reducir el nÃºmero de entornos de prueba para optimizar recursos.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La limpieza regular de la suite de pruebas ayuda a evitar la acumulaciÃ³n de tests innecesarios que pueden ralentizar la ejecuciÃ³n y dificultar el mantenimiento.

ğŸ§  Pregunta 30

Â¿CuÃ¡l es el objetivo principal de realizar "Code katas de tests" en un equipo de desarrollo?

A. Evaluar el rendimiento individual de cada desarrollador en la escritura de tests.
B. Practicar la creaciÃ³n de tests para pequeÃ±as piezas de cÃ³digo y compartir soluciones y patrones dentro del equipo.
C. Documentar detalladamente cada uno de los tests existentes en la suite.
D. Automatizar la generaciÃ³n de informes de cobertura de pruebas para todo el proyecto.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los code katas son ejercicios prÃ¡cticos que permiten al equipo mejorar sus habilidades de testing de forma colaborativa y aprender diferentes enfoques y patrones.

ğŸ§  Pregunta 31

Â¿CuÃ¡l de las siguientes NO se menciona como un objetivo de los "tests unitarios rÃ¡pidos"?

A. Validar la lÃ³gica interna.
B. Simular dependencias con mocks y stubs.
C. Interactuar con bases de datos reales.
D. Validar rutas crÃ­ticas de funciones.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los tests unitarios rÃ¡pidos estÃ¡n diseÃ±ados para ser aislados y no interactÃºan con sistemas externos como bases de datos reales.

ğŸ§  Pregunta 32

Â¿QuÃ© se utiliza comÃºnmente en los "tests de integraciÃ³n ligera" para preparar entornos simulados?

A. Despliegue de contenedores completos.
B. Fixtures parametrizadas.
C. InteracciÃ³n con APIs de producciÃ³n.
D. EjecuciÃ³n en navegadores reales.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las fixtures parametrizadas permiten configurar diferentes escenarios de prueba de manera controlada y eficiente en los tests de integraciÃ³n ligera.

ğŸ§  Pregunta 33

Â¿CuÃ¡l es el enfoque principal de las "pruebas de rendimiento y estrÃ©s"?

A. Validar la correcta funcionalidad del software bajo condiciones normales de uso.
B. Asegurar la compatibilidad con diferentes sistemas operativos y navegadores.
C. Medir latencias, throughput y escalabilidad bajo carga creciente.
D. Detectar errores de lÃ³gica y cÃ¡lculos internos en unidades de cÃ³digo aisladas.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Las pruebas de rendimiento y estrÃ©s estÃ¡n dedicadas a evaluar cÃ³mo se comporta el sistema ante diferentes niveles de carga y a identificar posibles cuellos de botella o puntos de falla.

ğŸ§  Pregunta 34

En un "pipeline de nightly builds", Â¿quÃ© tipo de pruebas se incluyen tÃ­picamente?

A. Solo tests unitarios y de integraciÃ³n ligera.
B. Tests que se ejecutan en menos de 2 minutos.
C. Tests E2E completos y suites de rendimiento.
D. Tests que se ejecutan Ãºnicamente en entornos simulados.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Los nightly builds son ejecuciones mÃ¡s completas que incluyen pruebas mÃ¡s exhaustivas y de mayor duraciÃ³n, como las E2E y las de rendimiento.

ğŸ§  Pregunta 35

Â¿QuÃ© se detecta durante el pipeline de pull request (CI) ademÃ¡s de la correcta ejecuciÃ³n de los tests?

A. Cuellos de botella en el rendimiento de la aplicaciÃ³n.
B. Vulnerabilidades de seguridad en las dependencias.
C. Degradaciones en la cobertura y benchmarking comparativo.
D. Errores de sintaxis en la documentaciÃ³n del cÃ³digo.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: El pipeline de pull request tambiÃ©n se encarga de generar informes sobre la cobertura del cÃ³digo por los tests y comparar el rendimiento con ejecuciones anteriores.

ğŸ§  Pregunta 36

En el contexto del "Test Impact Analysis", Â¿quÃ© sucede en caso de cambios masivos o refactorizaciones?

A. Se ejecuta un subconjunto optimizado de tests.
B. Se omite la ejecuciÃ³n de tests para acelerar el pipeline.
C. Se dispara la suite de pruebas completa como fallback.
D. Se analizan manualmente los cambios para determinar quÃ© tests ejecutar.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Cuando el TIA detecta un gran nÃºmero de cambios, puede ser mÃ¡s seguro y completo ejecutar toda la suite de pruebas para asegurar que no se hayan introducido regresiones.

ğŸ§  Pregunta 37

Â¿CuÃ¡l es el beneficio de utilizar un "cache de compilaciÃ³n" en lenguajes compilados?

A. Asegurar que siempre se utilicen las Ãºltimas versiones del compilador.
B. Reducir el tiempo necesario para construir y desplegar artefactos al reutilizar compilaciones previas.
C. Mejorar la seguridad del proceso de compilaciÃ³n al aislar los componentes.
D. Facilitar la depuraciÃ³n de errores relacionados con la compilaciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El cache de compilaciÃ³n guarda los resultados de compilaciones anteriores, permitiendo reutilizarlos si el cÃ³digo fuente no ha cambiado, lo que acelera significativamente el proceso de build.

ğŸ§  Pregunta 38

En GitHub Actions, Â¿quÃ© permite la estrategia de "matrix builds"?

A. Ejecutar los mismos tests secuencialmente en diferentes entornos.
B. Lanzar mÃºltiples jobs en paralelo con combinaciones de diferentes variables de entorno.
C. Definir dependencias complejas entre diferentes etapas del pipeline.
D. Limitar los recursos computacionales asignados a cada job de prueba.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La matriz de construcciÃ³n permite probar la aplicaciÃ³n en diversas configuraciones (por ejemplo, diferentes versiones de Python o sistemas operativos) de forma simultÃ¡nea.

ğŸ§  Pregunta 39

Â¿CuÃ¡l es una caracterÃ­stica de los entornos de prueba "persistentes"?

A. Se destruyen completamente despuÃ©s de cada ejecuciÃ³n de prueba.
B. Conservan el estado entre diferentes jobs, como la cachÃ© del sistema operativo o paquetes instalados.
C. Son mÃ¡s seguros ya que cada prueba se ejecuta en un entorno aislado.
D. Son ideales para pruebas rÃ¡pidas que requieren un entorno limpio en cada ejecuciÃ³n.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los entornos persistentes pueden acelerar la ejecuciÃ³n de pruebas pesadas al evitar la necesidad de reinstalar o reconfigurar componentes comunes en cada job.

ğŸ§  Pregunta 40

Â¿QuÃ© herramienta se menciona para orquestar contenedores simulados junto con el pipeline de pruebas?

A. Dockerfile.
B. Docker Hub.
C. Docker Compose.
D. Docker Swarm.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Docker Compose permite definir y gestionar mÃºltiples contenedores como una sola aplicaciÃ³n, facilitando la configuraciÃ³n de entornos de prueba con servicios simulados.

ğŸ§  Pregunta 41

Â¿QuÃ© acciÃ³n se recomienda tomar con los tests que utilizan demasiada lÃ³gica de setup en fixtures globales?

A. Eliminarlos por ser demasiado complejos.
B. Refactorizarlos para hacer el setup mÃ¡s especÃ­fico y eficiente.
C. Moverlos a un pipeline separado de ejecuciÃ³n mÃ¡s lenta.
D. Documentarlos detalladamente para que otros desarrolladores entiendan su funcionamiento.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Un setup excesivo en fixtures globales puede hacer que los tests sean mÃ¡s lentos y menos comprensibles, por lo que se recomienda refactorizarlos.

ğŸ§  Pregunta 42

Â¿QuÃ© tipo de informaciÃ³n se debe incluir en la documentaciÃ³n de la suite de pruebas en una "Wiki interna o Confluence"?

A. El organigrama del equipo de desarrollo y sus responsabilidades.
B. Las polÃ­ticas de vacaciones y los horarios de trabajo del equipo.
C. Ejemplos de pipelines y tips de optimizaciÃ³n documentados por miembros del equipo.
D. Los informes de rendimiento detallados de las Ãºltimas ejecuciones de prueba.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: La documentaciÃ³n interna debe ser prÃ¡ctica y Ãºtil para el equipo, incluyendo ejemplos y consejos que faciliten el trabajo con la suite de pruebas.

ğŸ§  Pregunta 43

Â¿QuÃ© se recomienda hacer con las zonas de cÃ³digo crÃ­ticas que tienen baja cobertura de pruebas?

A. Marcar el cÃ³digo como "de bajo riesgo" para evitar la necesidad de mÃ¡s pruebas.
B. Planificar tickets de implementaciÃ³n de pruebas para aumentar la cobertura.
C. Eliminar el cÃ³digo si no estÃ¡ suficientemente probado.
D. Refactorizar el cÃ³digo para que sea mÃ¡s difÃ­cil de probar y asÃ­ evitar la necesidad de tests.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Identificar Ã¡reas crÃ­ticas con baja cobertura es importante para priorizar la creaciÃ³n de nuevos tests y asegurar la calidad de las partes mÃ¡s importantes del sistema.

ğŸ§  Pregunta 44

Â¿QuÃ© tipo de preguntas se sugiere incluir en las "encuestas internas" a los desarrolladores sobre la suite de pruebas?

A. Preguntas sobre la satisfacciÃ³n general con el proceso de desarrollo.
B. Preguntas sobre la sensaciÃ³n de lentitud en el pipeline y Ã¡reas de fricciÃ³n.
C. Preguntas sobre las preferencias individuales de cada desarrollador en cuanto a herramientas de prueba.
D. Preguntas sobre la frecuencia con la que ejecutan las pruebas en su entorno local.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Las encuestas buscan obtener feedback cualitativo sobre los puntos dÃ©biles o las Ã¡reas de mejora percibidas por los desarrolladores en relaciÃ³n con las pruebas.

ğŸ§  Pregunta 45

Â¿CuÃ¡l es el propÃ³sito de las sesiones de "Pair programming en tests"?

A. Evaluar las habilidades individuales de cada desarrollador en la escritura de tests.
B. Fomentar la colaboraciÃ³n y el conocimiento compartido en la creaciÃ³n de tests para casos crÃ­ticos.
C. Reducir el tiempo dedicado a la escritura de tests al trabajar en parejas.
D. Asegurar que todos los tests sean escritos por al menos dos desarrolladores diferentes.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: El pair programming en tests promueve la discusiÃ³n, el intercambio de ideas y la mejora de la calidad de los tests a travÃ©s del trabajo colaborativo.

ğŸ§  Pregunta 46

Â¿QuÃ© tipo de informaciÃ³n se recomienda mostrar en pantallas de oficina para mejorar la visibilidad de la calidad?

A. El nÃºmero total de lÃ­neas de cÃ³digo en el proyecto.
B. Los nombres de los desarrolladores que han realizado mÃ¡s commits recientemente.
C. Dashboards clave de cobertura y performance de las pruebas.
D. La lista de tareas pendientes en el sistema de seguimiento de issues.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Mostrar mÃ©tricas importantes de calidad de forma visible ayuda a mantener el foco del equipo en la importancia de las pruebas y el rendimiento.

ğŸ§  Pregunta 47

Â¿QuÃ© tipo de contenido se sugiere incluir en los "Templates para nuevos tests"?

A. Los resultados de las Ãºltimas ejecuciones de tests similares.
B. Archivos base con boilerplate de fixtures, parametrizaciÃ³n y marcos de benchmarking.
C. Instrucciones detalladas sobre cÃ³mo depurar los tests en caso de fallo.
D. Un glosario de tÃ©rminos tÃ©cnicos relacionados con las pruebas.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: Los templates facilitan la creaciÃ³n de nuevos tests al proporcionar una estructura inicial y cÃ³digo comÃºn, ahorrando tiempo y promoviendo la consistencia.

ğŸ§  Pregunta 48

Â¿Con quÃ© periodicidad se recomienda realizar una "Calendario de limpieza de tests"?

A. Diariamente.
B. Semanalmente.
C. Cada tres meses.
D. Anualmente.

âœ… Correcta: C
ğŸ§¾ ExplicaciÃ³n: Una limpieza periÃ³dica, como cada tres meses, ayuda a mantener la suite de pruebas organizada y eficiente, eliminando tests obsoletos o duplicados.

ğŸ§  Pregunta 49

Â¿CuÃ¡l es el objetivo principal de definir "Test Champions" con un rol rotativo?

A. Asegurar que siempre haya una persona responsable de aprobar los pull requests relacionados con tests.
B. Distribuir la responsabilidad de fomentar buenas prÃ¡cticas de testing y la mejora continua dentro del equipo.
C. Crear una competencia sana entre los desarrolladores para ver quiÃ©n escribe los mejores tests.
D. Centralizar todo el conocimiento sobre las pruebas en una Ãºnica persona para facilitar la consulta.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: La rotaciÃ³n del rol de Test Champion ayuda a involucrar a diferentes miembros del equipo en la promociÃ³n de la calidad y la mejora de las prÃ¡cticas de prueba.

ğŸ§  Pregunta 50

Â¿QuÃ© se debe evaluar al analizar las zonas de cÃ³digo crÃ­ticas con baja cobertura?

A. Si el cÃ³digo es lo suficientemente complejo como para justificar la falta de pruebas.
B. Si el cÃ³digo debe refactorizarse para mejorar su testabilidad.
C. Si los desarrolladores tienen suficiente experiencia en la escritura de tests para esa Ã¡rea.
D. Si la baja cobertura se debe a la falta de tiempo en el ciclo de desarrollo.

âœ… Correcta: B
ğŸ§¾ ExplicaciÃ³n: A menudo, la dificultad para escribir tests en ciertas Ã¡reas del cÃ³digo es un indicativo de que el diseÃ±o o la estructura del cÃ³digo podrÃ­an mejorarse para facilitar las pruebas.