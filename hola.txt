üß† Pregunta 56
Dado el siguiente paso en Gherkin:

gherkin
Copiar
Editar
Given que el usuario "juan123" est√° registrado en el sistema
¬øCu√°l es la definici√≥n correcta del paso en Behave usando expresiones regulares?

A.

python
Copiar
Editar
@given('usuario registrado')
def step_impl(context):
    pass
B.

python
Copiar
Editar
@given(r'que el usuario "juan123" est√° registrado en el sistema')
def step_impl(context):
    context.username = "juan123"
C.

python
Copiar
Editar
@given(r'que el usuario "([^"]+)" est√° registrado en el sistema')
def step_impl(context, username):
    context.username = username
D.

python
Copiar
Editar
@given(r'que el usuario registrado')
def step_impl(context, username):
    pass
‚úÖ Correcta: C
üßæ Explicaci√≥n: La opci√≥n C usa una expresi√≥n regular para capturar din√°micamente el nombre del usuario desde el paso en Gherkin, asign√°ndolo a la variable username.

üß† Pregunta 57
¬øQu√© hace el siguiente fragmento de c√≥digo en Behave?

python
Copiar
Editar
@when('el usuario ingresa la contrase√±a "{password}"')
def step_impl(context, password):
    context.password = password
A. Ejecuta una acci√≥n sobre la base de datos
B. Captura din√°micamente la contrase√±a del paso en Gherkin y la guarda en el contexto
C. Verifica que la contrase√±a sea v√°lida
D. Define un test unitario para validar contrase√±as

‚úÖ Correcta: B
üßæ Explicaci√≥n: El decorador @when vincula un paso Gherkin que contiene una contrase√±a como par√°metro y la guarda en context para ser usada en pasos posteriores.

üß† Pregunta 58
Sup√≥n que tienes este escenario Gherkin:

gherkin
Copiar
Editar
Scenario: Inicio de sesi√≥n exitoso
  Given que el usuario "carla" est√° registrado en el sistema
  And la contrase√±a ingresada es "clave123"
  When el usuario intenta iniciar sesi√≥n
  Then el sistema le muestra el mensaje "Bienvenida, carla"
¬øQu√© paso de Python corresponde al Then?

A.

python
Copiar
Editar
@then('el sistema le muestra el mensaje "{mensaje}"')
def step_impl(context, mensaje):
    assert mensaje == "Bienvenida, carla"
B.

python
Copiar
Editar
@then('el sistema le muestra el mensaje')
def step_impl(context):
    print("Mensaje mostrado")
C.

python
Copiar
Editar
@then('la sesi√≥n es exitosa')
def step_impl(context):
    assert context.login == True
D.

python
Copiar
Editar
@then('usuario logueado')
def step_impl(context, mensaje):
    assert mensaje in context.message
‚úÖ Correcta: A
üßæ Explicaci√≥n: Se usa una expresi√≥n parametrizada para validar que el mensaje mostrado coincide con el esperado. Es la forma correcta de comparar en pruebas BDD.

üß† Pregunta 59
¬øCu√°l es el resultado de ejecutar el siguiente c√≥digo en un paso @then si context.resultado = 42?

python
Copiar
Editar
@then('el resultado debe ser {esperado:d}')
def step_impl(context, esperado):
    assert context.resultado == esperado
A. El paso se ejecutar√° correctamente si el resultado es 42
B. El paso fallar√° si el resultado es 42
C. La expresi√≥n :d convierte el valor a cadena
D. esperado ser√° capturado como string

‚úÖ Correcta: A
üßæ Explicaci√≥n: El par√°metro {esperado:d} en Behave indica que se espera un n√∫mero entero, y esperado se convierte autom√°ticamente a tipo int para compararlo.

üß† Pregunta 60
¬øQu√© estructura es v√°lida para un archivo .feature en Gherkin?

A.

gherkin
Copiar
Editar
Feature: Login

Step: El usuario se registra
B.

gherkin
Copiar
Editar
Scenario: Usuario presiona bot√≥n
  Click al bot√≥n "Enviar"
C.

gherkin
Copiar
Editar
Feature: Autenticaci√≥n
  Scenario: Login correcto
    Given el usuario est√° en el formulario
    When ingresa sus credenciales v√°lidas
    Then accede al sistema
D.

gherkin
Copiar
Editar
Function: Login
  Case: Ingreso
    Start > Submit > Response
‚úÖ Correcta: C
üßæ Explicaci√≥n: La opci√≥n C respeta la sintaxis de Gherkin: Feature, Scenario, y pasos con Given, When, Then. Es la forma correcta de definir un archivo .feature.



üß† Pregunta 56
Dado el siguiente paso de Gherkin: Dado que el usuario con nombre "Alice" y correo "alice@example.com" est√° registrado, ¬øc√≥mo se implementar√≠a la funci√≥n de Behave correspondiente en Python utilizando expresiones regulares para capturar los valores din√°micos?

A.

Python

from behave import given

@given('Dado que el usuario con nombre {nombre} y correo {correo} est√° registrado')
def step_impl(context, nombre, correo):
    context.nombre_usuario = nombre
    context.correo_usuario = correo
    # ... (c√≥digo para verificar el registro)
B.

Python

from behave import given

@given(r'Dado que el usuario con nombre "(.*)" y correo "(.*)" est√° registrado')
def step_impl(context, arg1, arg2):
    context.nombre_usuario = arg1
    context.correo_usuario = arg2
    # ... (c√≥digo para verificar el registro)
C.

Python

from behave import given

@given('Dado que el usuario con nombre \"(.*)\" y correo \"(.*)\" est√° registrado')
def step_impl(context):
    context.nombre_usuario = "Alice"
    context.correo_usuario = "alice@example.com"
    # ... (c√≥digo para verificar el registro)
D.

Python

from behave import given

@given('Dado que el usuario con nombre $nombre y correo $correo est√° registrado')
def step_impl(context, nombre, correo):
    context.nombre_usuario = nombre
    context.correo_usuario = correo
    # ... (c√≥digo para verificar el registro)
‚úÖ Correcta: B
üßæ Explicaci√≥n: La opci√≥n B utiliza la sintaxis correcta de expresiones regulares en Python (r'...') para capturar cualquier secuencia de caracteres entre comillas como los argumentos arg1 y arg2, que luego se asignan a las variables del contexto.

üß† Pregunta 57
Se tiene el siguiente criterio de aceptaci√≥n para una historia de usuario: "Al ingresar un correo electr√≥nico inv√°lido, el sistema debe mostrar el mensaje de error 'Formato de correo incorrecto'." ¬øC√≥mo se podr√≠a escribir un escenario de Gherkin y un fragmento de c√≥digo Behave (solo la parte del Then) para verificar este comportamiento?

A.

Gherkin

Escenario: Intento de registro con correo inv√°lido
  Dado que el usuario est√° en la p√°gina de registro
  Cuando ingresa el correo "usuario@invalido"
  Entonces el sistema muestra el mensaje de √©xito "Registro completado"

# Python (Then step)
from behave import then
@then('el sistema muestra el mensaje de √©xito "Registro completado"')
def step_impl(context):
    assert context.error_message == "Registro completado"
B.

Gherkin

Escenario: Intento de registro con correo inv√°lido
  Dado que el usuario est√° en la p√°gina de registro
  Cuando ingresa el correo "usuario@invalido"
  Entonces el sistema no permite el registro

# Python (Then step)
from behave import then
@then('el sistema no permite el registro')
def step_impl(context):
    assert not context.registration_successful
C.

Gherkin

Escenario: Intento de registro con correo inv√°lido
  Dado que el usuario est√° en la p√°gina de registro
  Cuando ingresa el correo "usuario@invalido"
  Entonces el sistema muestra el mensaje de error 'Formato de correo incorrecto'

# Python (Then step)
from behave import then
@then('el sistema muestra el mensaje de error \'{mensaje_error}\'')
def step_impl(context, mensaje_error):
    assert context.error_message == mensaje_error
D.

Gherkin

Escenario: Intento de registro con correo inv√°lido
  Dado que el usuario est√° en la p√°gina de registro
  Cuando ingresa el correo "usuario@invalido"
  Entonces se muestra un error

# Python (Then step)
from behave import then
@then('se muestra un error')
def step_impl(context):
    assert context.error_displayed is True
‚úÖ Correcta: C
üßæ Explicaci√≥n: La opci√≥n C alinea correctamente el escenario de Gherkin con el criterio de aceptaci√≥n y utiliza una variable ({mensaje_error}) en el paso Then para comparar el mensaje de error real con el esperado.

üß† Pregunta 58
En un proyecto Behave, se necesita acceder a un valor almacenado en el context durante un paso Given en un paso Then. Si en el paso Given se guard√≥ el nombre de un producto como context.producto_nombre, ¬øc√≥mo se acceder√≠a a este valor en el paso Then para verificar un mensaje que lo incluya?

A. Usando una variable global llamada producto_nombre.
B. Accediendo directamente a producto_nombre sin el prefijo context.
C. Utilizando context.producto_nombre dentro de la funci√≥n del paso Then.
D. Pasando el valor como un argumento adicional en el decorador @then.

‚úÖ Correcta: C
üßæ Explicaci√≥n: El objeto context en Behave se utiliza para compartir datos entre los diferentes pasos de un mismo escenario. La forma correcta de acceder a un atributo del contexto es utilizando context.nombre_atributo.

üß† Pregunta 59
Dado el siguiente fragmento de c√≥digo Python en un archivo de steps de Behave:

Python

from behave import when

@when('el usuario hace clic en el bot√≥n "{boton_texto}"')
def step_impl(context, boton_texto):
    context.boton_clicado = boton_texto
    # ... (c√≥digo para simular el clic)
Y el siguiente escenario de Gherkin:

Gherkin

Escenario: Realizar una acci√≥n
  Dado que el usuario est√° en la p√°gina principal
  Cuando el usuario hace clic en el bot√≥n "Guardar"
  Entonces se debe registrar la acci√≥n del bot√≥n "Guardar"
¬øC√≥mo se verificar√≠a en el paso Then que el bot√≥n correcto fue "clicado", utilizando la informaci√≥n almacenada en el context?

A.

Python

from behave import then
@then('se debe registrar la acci√≥n del bot√≥n "Guardar"')
def step_impl(context):
    assert "Guardar" in context.registro_acciones
B.

Python

from behave import then
@then('se debe registrar la acci√≥n del bot√≥n "Guardar"')
def step_impl(context):
    assert context.boton_clicado == "Acceder"
C.

Python

from behave import then
@then('se debe registrar la acci√≥n del bot√≥n "Guardar"')
def step_impl(context):
    assert context.boton_clicado is True
D.

Python

from behave import then
@then('se debe registrar la acci√≥n del bot√≥n "Guardar"')
def step_impl(context):
    assert context.boton_clicado == "Guardar"
‚úÖ Correcta: D
üßæ Explicaci√≥n: La opci√≥n D verifica correctamente que el valor almacenado en context.boton_clicado (que se estableci√≥ en el paso When) sea igual al texto del bot√≥n esperado ("Guardar").

üß† Pregunta 60
En un proyecto Behave, se necesita ejecutar un c√≥digo de configuraci√≥n (setup) antes de que se ejecute cada Feature y un c√≥digo de limpieza (teardown) despu√©s de cada Scenario. ¬øD√≥nde se definir√≠an estas funciones de "hooks"?

A. Directamente dentro de los archivos .feature.
B. En archivos separados con nombres espec√≠ficos dentro del directorio steps.
C. En un archivo llamado environment.py en la ra√≠z del proyecto o en el directorio steps.
D. En archivos de configuraci√≥n .ini o .yaml.

‚úÖ Correcta: C
üßæ Explicaci√≥n: Behave utiliza un archivo especial llamado environment.py donde se pueden definir funciones de "hooks" como before_feature y after_scenario para ejecutar c√≥digo en momentos espec√≠ficos del ciclo de vida de las pruebas.